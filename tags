	session.vim	/^nnoremap <silent>  :CtrlP$/;"	m
	session.vim	/^inoremap <expr>  omni#cpp#maycomplete#Complete()$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
.	session.vim	/^inoremap <expr> . omni#cpp#maycomplete#Dot()$/;"	m
034|	session.vim	/^normal! 034|$/;"	m
040|	session.vim	/^normal! 040|$/;"	m
045|	session.vim	/^normal! 045|$/;"	m
:	session.vim	/^inoremap <expr> : omni#cpp#maycomplete#Scope()$/;"	m
<C-CR>	session.vim	/^nmap <C-CR> T$/;"	m
<NL>	session.vim	/^inoremap <NL> :call search(BC_GetChar(), "W")$/;"	m
<Plug>NetrwBrowseX	session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cfile>"),0)$/;"	m
<Plug>VCSAdd	session.vim	/^nnoremap <silent> <Plug>VCSAdd :VCSAdd$/;"	m
<Plug>VCSAnnotate	session.vim	/^nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate$/;"	m
<Plug>VCSClearAndGotoOriginal	session.vim	/^nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!$/;"	m
<Plug>VCSCommit	session.vim	/^nnoremap <silent> <Plug>VCSCommit :VCSCommit$/;"	m
<Plug>VCSDelete	session.vim	/^nnoremap <silent> <Plug>VCSDelete :VCSDelete$/;"	m
<Plug>VCSDiff	session.vim	/^nnoremap <silent> <Plug>VCSDiff :VCSDiff$/;"	m
<Plug>VCSGotoOriginal	session.vim	/^nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal$/;"	m
<Plug>VCSInfo	session.vim	/^nnoremap <silent> <Plug>VCSInfo :VCSInfo$/;"	m
<Plug>VCSLock	session.vim	/^nnoremap <silent> <Plug>VCSLock :VCSLock$/;"	m
<Plug>VCSLog	session.vim	/^nnoremap <silent> <Plug>VCSLog :VCSLog$/;"	m
<Plug>VCSRevert	session.vim	/^nnoremap <silent> <Plug>VCSRevert :VCSRevert$/;"	m
<Plug>VCSReview	session.vim	/^nnoremap <silent> <Plug>VCSReview :VCSReview$/;"	m
<Plug>VCSSplitAnnotate	session.vim	/^nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!$/;"	m
<Plug>VCSStatus	session.vim	/^nnoremap <silent> <Plug>VCSStatus :VCSStatus$/;"	m
<Plug>VCSUnlock	session.vim	/^nnoremap <silent> <Plug>VCSUnlock :VCSUnlock$/;"	m
<Plug>VCSUpdate	session.vim	/^nnoremap <silent> <Plug>VCSUpdate :VCSUpdate$/;"	m
<Plug>VCSVimDiff	session.vim	/^nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff$/;"	m
<S-Insert>	session.vim	/^map <S-Insert> <MiddleMouse>$/;"	m
<S-Insert>	session.vim	/^map! <S-Insert> <MiddleMouse>$/;"	m
>	session.vim	/^inoremap <expr> > omni#cpp#maycomplete#Arrow()$/;"	m
App0	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
App1	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
App10	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
App11	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
App12	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
App13	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
App14	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
App15	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
App2	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
App3	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
App4	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
App5	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
App6	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
App7	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
App8	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
App9	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
ArithTemp	imaged/jpeg.d	/^        ArithTemp = 0x01,$/;"	e	enum:JpegDecoder::Marker	file:
ArithmeticTableDef	imaged/jpeg.d	/^        ArithmeticTableDef = 0xCC,$/;"	e	enum:JpegDecoder::Marker	file:
ArthBaselineDCT	imaged/jpeg.d	/^        ArthBaselineDCT = 0xC8,$/;"	e	enum:JpegDecoder::Marker	file:
ArthDiffLosslessSeq	imaged/jpeg.d	/^        ArthDiffLosslessSeq = 0xCF,$/;"	e	enum:JpegDecoder::Marker	file:
ArthDiffProgressiveDCT	imaged/jpeg.d	/^        ArthDiffProgressiveDCT = 0xCE,$/;"	e	enum:JpegDecoder::Marker	file:
ArthDiffSequentialDCT	imaged/jpeg.d	/^        ArthDiffSequentialDCT = 0xCD,$/;"	e	enum:JpegDecoder::Marker	file:
ArthExtSequentialDCT	imaged/jpeg.d	/^        ArthExtSequentialDCT = 0xC9,$/;"	e	enum:JpegDecoder::Marker	file:
ArthLosslessSeq	imaged/jpeg.d	/^        ArthLosslessSeq = 0xCB,$/;"	e	enum:JpegDecoder::Marker	file:
ArthProgressiveDCT	imaged/jpeg.d	/^        ArthProgressiveDCT = 0xCA,$/;"	e	enum:JpegDecoder::Marker	file:
Atom	simpledisplay.d	/^	alias uint Atom;$/;"	t	file:
BICUBIC	imaged/image.d	/^        BICUBIC$/;"	e	enum:Image::ResizeAlgo	file:
BILINEAR	imaged/image.d	/^        BILINEAR,$/;"	e	enum:Image::ResizeAlgo	file:
BILINEAR	imaged/jpeg.d	/^        BILINEAR  \/\/ Bilinear interpolation$/;"	e	enum:JpegDecoder::Upsampling	file:
BlackPixel	simpledisplay.d	/^	uint BlackPixel(Display *dpy,int scr) {$/;"	f	signature:(Display *dpy,int scr)
BmpEncoder	imaged/bmp.d	/^class BmpEncoder : Encoder$/;"	c	file:	inherits:Encoder
BmpEncoder::write	imaged/bmp.d	/^    override bool write(in Image img, string filename)$/;"	f	class:BmpEncoder	access:public	signature:(in Image img, string filename)
BmpEncoder::writeLE2	imaged/bmp.d	/^    static void writeLE2(ref File fp, ushort value)$/;"	f	class:BmpEncoder	access:public	signature:(ref File fp, ushort value)
BmpEncoder::writeLE4	imaged/bmp.d	/^    static void writeLE4(ref File fp, uint value)$/;"	f	class:BmpEncoder	access:public	signature:(ref File fp, uint value)
Bool	simpledisplay.d	/^	alias bool Bool;$/;"	t	file:
ByteOrder	simpledisplay.d	/^	alias int ByteOrder;$/;"	t	file:
CROP	imaged/image.d	/^        CROP,$/;"	e	enum:Image::ResizeAlgo	file:
CapButt	simpledisplay.d	83;"	d	file:
CapNotLast	simpledisplay.d	82;"	d	file:
CapProjecting	simpledisplay.d	85;"	d	file:
CapRound	simpledisplay.d	84;"	d	file:
Chunk	imaged/png.d	/^    enum Chunk$/;"	g	class:PngDecoder	file:	access:public
Color	arsd/color.d	/^struct Color {$/;"	s	file:
Color::a	arsd/color.d	/^	ubyte a;$/;"	m	struct:Color	file:	access:public
Color::b	arsd/color.d	/^	ubyte b;$/;"	m	struct:Color	file:	access:public
Color::black	arsd/color.d	/^	static Color black() {$/;"	f	struct:Color	access:public	signature:()
Color::g	arsd/color.d	/^	ubyte g;$/;"	m	struct:Color	file:	access:public
Color::r	arsd/color.d	/^	ubyte r;$/;"	m	struct:Color	file:	access:public
Color::toString	arsd/color.d	/^	string toString() {$/;"	f	struct:Color	access:public	signature:()
Color::transparent	arsd/color.d	/^	static Color transparent() {$/;"	f	struct:Color	access:public	signature:()
Color::white	arsd/color.d	/^	static Color white() {$/;"	f	struct:Color	access:public	signature:()
Colormap	simpledisplay.d	/^alias XID Colormap;$/;"	t	file:
Comment	imaged/jpeg.d	/^        Comment = 0xFE,$/;"	e	enum:JpegDecoder::Marker	file:
Component	imaged/jpeg.d	/^    struct Component$/;"	s	class:JpegDecoder	file:	access:public
Dashed	simpledisplay.d	/^		Dashed$/;"	e	enum:Pen::Style	file:
Decoder	imaged/image.d	/^abstract class Decoder$/;"	c	file:
Decoder::errorState	imaged/image.d	/^    @property IMGError errorState() const { return m_errorState; } \/\/ ditto$/;"	f	class:Decoder	access:public	signature:() const
Decoder::image	imaged/image.d	/^    @property Image image() { return m_image; }$/;"	f	class:Decoder	access:public	signature:()
Decoder::m_errorState	imaged/image.d	/^    IMGError m_errorState;$/;"	m	class:Decoder	file:	access:public
Decoder::m_image	imaged/image.d	/^    Image m_image;$/;"	m	class:Decoder	file:	access:public
Decoder::m_logging	imaged/image.d	/^    bool m_logging = false; \/\/ if true, will emit logs when in debug mode$/;"	m	class:Decoder	file:	access:public
Decoder::parseByte	imaged/image.d	/^    void parseByte(ubyte bite);$/;"	p	class:Decoder	file:	access:public	signature:(ubyte bite)
Decoder::parseFile	imaged/image.d	/^    void parseFile(in string filename)$/;"	f	class:Decoder	access:public	signature:(in string filename)
Decoder::parseStream	imaged/image.d	/^    size_t parseStream(Stream stream, in size_t chunkSize = 100000)$/;"	f	class:Decoder	access:public	signature:(Stream stream, in size_t chunkSize = 100000)
DefaultGC	simpledisplay.d	/^	GC DefaultGC(Display *dpy,int scr) {$/;"	f	signature:(Display *dpy,int scr)
DefaultScreen	simpledisplay.d	/^	int DefaultScreen(Display *dpy) {$/;"	f	signature:(Display *dpy)
DefaultVisual	simpledisplay.d	/^	Visual* DefaultVisual(Display *dpy,int scr) {$/;"	f	signature:(Display *dpy,int scr)
Depth	simpledisplay.d	/^struct Depth$/;"	s	file:
Depth::depth	simpledisplay.d	/^	int depth;		\/* this depth (Z) of the depth *\/$/;"	m	struct:Depth	file:	access:public
Depth::nvisuals	simpledisplay.d	/^	int nvisuals;		\/* number of Visual types at this depth *\/$/;"	m	struct:Depth	file:	access:public
Depth::visuals	simpledisplay.d	/^	Visual *visuals;	\/* list of visuals possible at this depth *\/$/;"	m	struct:Depth	file:	access:public
Display	simpledisplay.d	/^	struct Display {$/;"	s	file:
Display::bitmap_bit_order	simpledisplay.d	/^		ByteOrder bitmap_bit_order;	\/* LeastSignificant or MostSignificant *\/$/;"	m	struct:Display	file:	access:public
Display::bitmap_pad	simpledisplay.d	/^		int bitmap_pad;		\/* padding requirements on bitmaps *\/$/;"	m	struct:Display	file:	access:public
Display::bitmap_unit	simpledisplay.d	/^		int bitmap_unit;	\/* padding and data requirements *\/$/;"	m	struct:Display	file:	access:public
Display::byte_order	simpledisplay.d	/^		ByteOrder byte_order;		\/* screen byte order, LSBFirst, MSBFirst *\/$/;"	m	struct:Display	file:	access:public
Display::db	simpledisplay.d	/^		_XrmHashBucketRec *db;$/;"	m	struct:Display	file:	access:public
Display::default_screen	simpledisplay.d	/^		int default_screen;	\/* default screen for operations *\/$/;"	m	struct:Display	file:	access:public
Display::display_name	simpledisplay.d	/^		char *display_name;	\/* "host:display" string used on this connect*\/$/;"	m	struct:Display	file:	access:public
Display::ext_data	simpledisplay.d	/^		XExtData *ext_data;	\/* hook for extension to hang data *\/$/;"	m	struct:Display	file:	access:public
Display::fd	simpledisplay.d	/^		int fd;			\/* Network socket. *\/$/;"	m	struct:Display	file:	access:public
Display::last_request_read	simpledisplay.d	/^		uint last_request_read; \/* seq number of last event read *\/$/;"	m	struct:Display	file:	access:public
Display::max_keycode	simpledisplay.d	/^		int max_keycode;	\/* maximum defined keycode *\/$/;"	m	struct:Display	file:	access:public
Display::max_request_size	simpledisplay.d	/^		uint max_request_size; \/* maximum number 32 bit words in request*\/$/;"	m	struct:Display	file:	access:public
Display::min_keycode	simpledisplay.d	/^		int min_keycode;	\/* minimum defined keycode *\/$/;"	m	struct:Display	file:	access:public
Display::motion_buffer	simpledisplay.d	/^		uint motion_buffer;	\/* size of motion buffer *\/$/;"	m	struct:Display	file:	access:public
Display::nformats	simpledisplay.d	/^		int nformats;		\/* number of pixmap formats in list *\/$/;"	m	struct:Display	file:	access:public
Display::nscreens	simpledisplay.d	/^		int nscreens;		\/* number of screens on this server*\/$/;"	m	struct:Display	file:	access:public
Display::pixmap_format	simpledisplay.d	/^		ScreenFormat *pixmap_format;	\/* pixmap format list *\/$/;"	m	struct:Display	file:	access:public
Display::private1	simpledisplay.d	/^		_XPrivate *private1;$/;"	m	struct:Display	file:	access:public
Display::private10	simpledisplay.d	/^		_XPrivate *private10;$/;"	m	struct:Display	file:	access:public
Display::private11	simpledisplay.d	/^		XPointer private11;$/;"	m	struct:Display	file:	access:public
Display::private12	simpledisplay.d	/^		XPointer private12;$/;"	m	struct:Display	file:	access:public
Display::private13	simpledisplay.d	/^		XPointer private13;$/;"	m	struct:Display	file:	access:public
Display::private14	simpledisplay.d	/^		XPointer private14;$/;"	m	struct:Display	file:	access:public
Display::private15	simpledisplay.d	/^		int function  (Display*)private15;$/;"	m	struct:Display	file:	access:public
Display::private16	simpledisplay.d	/^		uint private16;$/;"	m	struct:Display	file:	access:public
Display::private17	simpledisplay.d	/^		XPointer private17;$/;"	m	struct:Display	file:	access:public
Display::private18	simpledisplay.d	/^		XPointer private18;$/;"	m	struct:Display	file:	access:public
Display::private19	simpledisplay.d	/^		int private19;$/;"	m	struct:Display	file:	access:public
Display::private2	simpledisplay.d	/^		int private2;$/;"	m	struct:Display	file:	access:public
Display::private3	simpledisplay.d	/^	    	XID private3;$/;"	m	struct:Display	file:	access:public
Display::private4	simpledisplay.d	/^		XID private4;$/;"	m	struct:Display	file:	access:public
Display::private5	simpledisplay.d	/^		XID private5;$/;"	m	struct:Display	file:	access:public
Display::private6	simpledisplay.d	/^		int private6;$/;"	m	struct:Display	file:	access:public
Display::private8	simpledisplay.d	/^		int private8;$/;"	m	struct:Display	file:	access:public
Display::private9	simpledisplay.d	/^		_XPrivate *private9;$/;"	m	struct:Display	file:	access:public
Display::proto_major_version	simpledisplay.d	/^		int proto_major_version;\/* major version of server's X protocol *\/$/;"	m	struct:Display	file:	access:public
Display::proto_minor_version	simpledisplay.d	/^		int proto_minor_version;\/* minor version of servers X protocol *\/$/;"	m	struct:Display	file:	access:public
Display::qlen	simpledisplay.d	/^		int qlen;		\/* Length of input event queue *\/$/;"	m	struct:Display	file:	access:public
Display::release	simpledisplay.d	/^		int release;		\/* release of the server *\/$/;"	m	struct:Display	file:	access:public
Display::request	simpledisplay.d	/^		uint request;	\/* sequence number of last request. *\/$/;"	m	struct:Display	file:	access:public
Display::resource_alloc	simpledisplay.d	/^		XID function(Display*)resource_alloc;\/* allocator function *\/$/;"	m	struct:Display	file:	access:public
Display::screens	simpledisplay.d	/^		Screen *screens;	\/* pointer to list of screens *\/$/;"	m	struct:Display	file:	access:public
Display::vendor	simpledisplay.d	/^		char *vendor;		\/* vendor of the server hardware *\/$/;"	m	struct:Display	file:	access:public
Display::xdefaults	simpledisplay.d	/^		byte *xdefaults;	\/* contents of defaults from server *\/$/;"	m	struct:Display	file:	access:public
Drawable	simpledisplay.d	/^	alias XID Drawable;$/;"	t	file:
Encoder	imaged/image.d	/^abstract class Encoder$/;"	c	file:
Encoder::write	imaged/image.d	/^    bool write(in Image img, string filename);$/;"	p	class:Encoder	file:	access:public	signature:(in Image img, string filename)
EndOfImage	imaged/jpeg.d	/^        EndOfImage = 0xD9,$/;"	e	enum:JpegDecoder::Marker	file:
ExpandRefComponents	imaged/jpeg.d	/^        ExpandRefComponents = 0xDF,$/;"	e	enum:JpegDecoder::Marker	file:
FillOpaqueStippled	simpledisplay.d	98;"	d	file:
FillSolid	simpledisplay.d	95;"	d	file:
FillStippled	simpledisplay.d	97;"	d	file:
FillTiled	simpledisplay.d	96;"	d	file:
GC	simpledisplay.d	/^alias void* GC;$/;"	t	file:
GETFROMEXTENSION	imaged/image.d	/^    GETFROMEXTENSION,$/;"	e	enum:ImageFormat	file:
HierarchProgressionDef	imaged/jpeg.d	/^        HierarchProgressionDef = 0xDE,$/;"	e	enum:JpegDecoder::Marker	file:
HuffBaselineDCT	imaged/jpeg.d	/^        HuffBaselineDCT = 0xC0,$/;"	e	enum:JpegDecoder::Marker	file:
HuffDiffLosslessSeq	imaged/jpeg.d	/^        HuffDiffLosslessSeq = 0xC7,$/;"	e	enum:JpegDecoder::Marker	file:
HuffDiffProgressiveDCT	imaged/jpeg.d	/^        HuffDiffProgressiveDCT = 0xC6,$/;"	e	enum:JpegDecoder::Marker	file:
HuffDiffSequentialDCT	imaged/jpeg.d	/^        HuffDiffSequentialDCT = 0xC5,$/;"	e	enum:JpegDecoder::Marker	file:
HuffExtSequentialDCT	imaged/jpeg.d	/^        HuffExtSequentialDCT = 0xC1,$/;"	e	enum:JpegDecoder::Marker	file:
HuffLosslessSeq	imaged/jpeg.d	/^        HuffLosslessSeq = 0xC3,$/;"	e	enum:JpegDecoder::Marker	file:
HuffProgressiveDCT	imaged/jpeg.d	/^        HuffProgressiveDCT = 0xC2,$/;"	e	enum:JpegDecoder::Marker	file:
HuffmanTableDef	imaged/jpeg.d	/^        HuffmanTableDef = 0xC4,$/;"	e	enum:JpegDecoder::Marker	file:
IDAT	imaged/png.d	/^        IDAT, \/\/ image$/;"	e	enum:PngDecoder::Chunk	file:
IEND	imaged/png.d	/^        IEND \/\/ end of image$/;"	e	enum:PngDecoder::Chunk	file:
IHDR	imaged/png.d	/^        IHDR, \/\/ header$/;"	e	enum:PngDecoder::Chunk	file:
IMGError	imaged/image.d	/^struct IMGError$/;"	s	file:
IMGError::code	imaged/image.d	/^    int code;$/;"	m	struct:IMGError	file:	access:public
IMGError::message	imaged/image.d	/^    string message;$/;"	m	struct:IMGError	file:	access:public
Image	imaged/image.d	/^interface Image$/;"	v	file:
Image	simpledisplay.d	/^class Image {$/;"	c	file:
Image::BICUBIC	imaged/image.d	/^        BICUBIC$/;"	e	enum:Image::ResizeAlgo	file:
Image::BILINEAR	imaged/image.d	/^        BILINEAR,$/;"	e	enum:Image::ResizeAlgo	file:
Image::CROP	imaged/image.d	/^        CROP,$/;"	e	enum:Image::ResizeAlgo	file:
Image::NEAREST	imaged/image.d	/^        NEAREST,$/;"	e	enum:Image::ResizeAlgo	file:
Image::NativeImageImplementation	simpledisplay.d	/^	mixin NativeImageImplementation!() impl;$/;"	X
Image::ResizeAlgo	imaged/image.d	/^    enum ResizeAlgo {$/;"	g	virtual:Image	file:	access:public
Image::bitDepth	imaged/image.d	/^    @property const(uint) bitDepth() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
Image::copy	imaged/image.d	/^    Image copy() const;$/;"	p	virtual:Image	file:	access:public	signature:() const
Image::getPixel	imaged/image.d	/^    Pixel getPixel(size_t x, size_t y, bool scaleToByte = true);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
Image::height	imaged/image.d	/^    @property const(uint) height() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
Image::height	simpledisplay.d	/^	immutable int height;$/;"	m	class:Image	file:	access:public
Image::impl	simpledisplay.d	/^	mixin NativeImageImplementation!() impl;$/;"	m	class:Image	file:	access:public
Image::opIndex	imaged/image.d	/^    Pixel opIndex(size_t x, size_t y, bool scaleToByte = true);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
Image::opIndexAssign	simpledisplay.d	/^	void opIndexAssign(Color c, int x, int y) {$/;"	f	class:Image	access:public	signature:(Color c, int x, int y)
Image::pixelFormat	imaged/image.d	/^    @property const(Px) pixelFormat() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
Image::pixels	imaged/image.d	/^    @property const(ubyte[]) pixels() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
Image::pixels	imaged/image.d	/^    @property ref ubyte[] pixels(); \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:()
Image::pixelsPtr	imaged/image.d	/^    @property ubyte* pixelsPtr(); \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:()
Image::putPixel	simpledisplay.d	/^	void putPixel(int x, int y, Color c) {$/;"	f	class:Image	access:public	signature:(int x, int y, Color c)
Image::resize	imaged/image.d	/^    bool resize(uint newWidth, uint newHeight, ResizeAlgo algo = ResizeAlgo.NEAREST);$/;"	p	virtual:Image	file:	access:public	signature:(uint newWidth, uint newHeight, ResizeAlgo algo = ResizeAlgo.NEAREST)
Image::setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, Pixel p);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, Pixel p)
Image::setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, const(ubyte[]) data);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, const(ubyte[]) data)
Image::setRow	imaged/image.d	/^    void setRow(size_t y, const(ubyte[]) data);$/;"	p	virtual:Image	file:	access:public	signature:(size_t y, const(ubyte[]) data)
Image::stride	imaged/image.d	/^    @property const(int) stride() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
Image::width	imaged/image.d	/^    @property const(uint) width() const;$/;"	p	virtual:Image	file:	access:public	signature:() const
Image::width	simpledisplay.d	/^	immutable int width;$/;"	m	class:Image	file:	access:public
Image::write	imaged/image.d	/^    bool write(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION);$/;"	p	virtual:Image	file:	access:public	signature:(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION)
Image::~this	simpledisplay.d	/^	~this() {$/;"	f	class:Image	access:public	signature:()
ImageFormat	imaged/image.d	/^enum ImageFormat$/;"	g	file:
Img	imaged/image.d	/^class Img(Px F) : Image$/;"	c	file:
Img::bitDepth	imaged/image.d	/^    @property const(uint) bitDepth() const { return m_bitDepth; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
Img::copy	imaged/image.d	/^    Img!F copy() const$/;"	f	class:Img	access:public	signature:() const
Img::getIndex	imaged/image.d	/^    uint getIndex(size_t x, size_t y)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y)
Img::getPixel	imaged/image.d	/^    Pixel getPixel(size_t x, size_t y, bool scaleToByte = true)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
Img::height	imaged/image.d	/^    @property const(uint) height() const { return m_height; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
Img::m_bitDepth	imaged/image.d	/^    uint m_bitDepth = 0;$/;"	m	class:Img	file:	access:public
Img::m_channels	imaged/image.d	/^    uint m_channels = 0;$/;"	m	class:Img	file:	access:public
Img::m_data	imaged/image.d	/^    ubyte[] m_data;$/;"	m	class:Img	file:	access:public
Img::m_height	imaged/image.d	/^    uint m_width = 0, m_height = 0;$/;"	m	class:Img	file:	access:public
Img::m_stride	imaged/image.d	/^    int m_stride = 0; \/\/ in bytes (minimum 1)$/;"	m	class:Img	file:	access:public
Img::m_width	imaged/image.d	/^    uint m_width = 0, m_height = 0;$/;"	m	class:Img	file:	access:public
Img::opIndex	imaged/image.d	/^    Pixel opIndex(size_t x, size_t y, bool scaleToByte = true)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
Img::pixelFormat	imaged/image.d	/^    @property const(Px) pixelFormat() const { return F; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
Img::pixels	imaged/image.d	/^    @property const(ubyte[]) pixels() const { return m_data; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
Img::pixels	imaged/image.d	/^    @property ref ubyte[] pixels() { return m_data; } \/\/ ditto$/;"	f	class:Img	access:public	signature:()
Img::pixelsPtr	imaged/image.d	/^    @property ubyte* pixelsPtr() { return m_data.ptr; } \/\/ ditto$/;"	f	class:Img	access:public	signature:()
Img::resize	imaged/image.d	/^    bool resize(uint newWidth, uint newHeight, ResizeAlgo algo)$/;"	f	class:Img	access:public	signature:(uint newWidth, uint newHeight, ResizeAlgo algo)
Img::setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, Pixel p)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, Pixel p)
Img::setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, const(ubyte[]) data)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, const(ubyte[]) data)
Img::setRow	imaged/image.d	/^    void setRow(size_t y, const(ubyte[]) data)$/;"	f	class:Img	access:public	signature:(size_t y, const(ubyte[]) data)
Img::stride	imaged/image.d	/^    @property const(int) stride() const { return m_stride; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
Img::width	imaged/image.d	/^    @property const(uint) width() const { return m_width; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
Img::write	imaged/image.d	/^    bool write(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION)$/;"	f	class:Img	access:public	signature:(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION)
InterLace	imaged/png.d	/^    struct InterLace$/;"	s	class:PngDecoder	file:	access:public
JPEG	imaged/image.d	/^    JPEG$/;"	e	enum:ImageFormat	file:
JPG	imaged/image.d	/^    JPG,$/;"	e	enum:ImageFormat	file:
JPGSegment	imaged/jpeg.d	/^    struct JPGSegment$/;"	s	class:JpegDecoder	file:	access:public
JoinBevel	simpledisplay.d	91;"	d	file:
JoinMiter	simpledisplay.d	89;"	d	file:
JoinRound	simpledisplay.d	90;"	d	file:
JpegDecoder	imaged/jpeg.d	/^class JpegDecoder : Decoder$/;"	c	file:	inherits:Decoder
JpegDecoder::App0	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App1	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App10	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App11	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App12	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App13	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App14	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App15	imaged/jpeg.d	/^        App12 = 0xEC, App13 = 0xED, App14 = 0xEE, App15 = 0xEF,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App2	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App3	imaged/jpeg.d	/^        App0 = 0xE0, App1 = 0xE1, App2 = 0xE2, App3 = 0xE3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App4	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App5	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App6	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App7	imaged/jpeg.d	/^        App4 = 0xE4, App5 = 0xE5, App6 = 0xE6, App7 = 0xE7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App8	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::App9	imaged/jpeg.d	/^        App8 = 0xE8, App9 = 0xE9, App10 = 0xEA, App11 = 0xEB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArithTemp	imaged/jpeg.d	/^        ArithTemp = 0x01,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArithmeticTableDef	imaged/jpeg.d	/^        ArithmeticTableDef = 0xCC,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArthBaselineDCT	imaged/jpeg.d	/^        ArthBaselineDCT = 0xC8,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArthDiffLosslessSeq	imaged/jpeg.d	/^        ArthDiffLosslessSeq = 0xCF,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArthDiffProgressiveDCT	imaged/jpeg.d	/^        ArthDiffProgressiveDCT = 0xCE,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArthDiffSequentialDCT	imaged/jpeg.d	/^        ArthDiffSequentialDCT = 0xCD,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArthExtSequentialDCT	imaged/jpeg.d	/^        ArthExtSequentialDCT = 0xC9,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArthLosslessSeq	imaged/jpeg.d	/^        ArthLosslessSeq = 0xCB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ArthProgressiveDCT	imaged/jpeg.d	/^        ArthProgressiveDCT = 0xCA,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::BILINEAR	imaged/jpeg.d	/^        BILINEAR  \/\/ Bilinear interpolation$/;"	e	enum:JpegDecoder::Upsampling	file:
JpegDecoder::Comment	imaged/jpeg.d	/^        Comment = 0xFE,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Component	imaged/jpeg.d	/^    struct Component$/;"	s	class:JpegDecoder	file:	access:public
JpegDecoder::Component::data	imaged/jpeg.d	/^        ubyte[] data; \/\/ a single MCU of data for this component$/;"	m	struct:JpegDecoder::Component	file:	access:public
JpegDecoder::Component::h_sample	imaged/jpeg.d	/^        h_sample, \/\/ horizontal samples$/;"	m	struct:JpegDecoder::Component	file:	access:public
JpegDecoder::Component::id	imaged/jpeg.d	/^        int id, \/\/ component id$/;"	m	struct:JpegDecoder::Component	file:	access:public
JpegDecoder::Component::qtt	imaged/jpeg.d	/^        qtt, \/\/ quantization table id$/;"	m	struct:JpegDecoder::Component	file:	access:public
JpegDecoder::Component::v_sample	imaged/jpeg.d	/^        v_sample; \/\/ vertical samples$/;"	m	struct:JpegDecoder::Component	file:	access:public
JpegDecoder::Component::x	imaged/jpeg.d	/^        int x, y; \/\/ x, y are size of MCU$/;"	m	struct:JpegDecoder::Component	file:	access:public
JpegDecoder::Component::y	imaged/jpeg.d	/^        int x, y; \/\/ x, y are size of MCU$/;"	m	struct:JpegDecoder::Component	file:	access:public
JpegDecoder::EndOfImage	imaged/jpeg.d	/^        EndOfImage = 0xD9,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ExpandRefComponents	imaged/jpeg.d	/^        ExpandRefComponents = 0xDF,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HierarchProgressionDef	imaged/jpeg.d	/^        HierarchProgressionDef = 0xDE,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffBaselineDCT	imaged/jpeg.d	/^        HuffBaselineDCT = 0xC0,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffDiffLosslessSeq	imaged/jpeg.d	/^        HuffDiffLosslessSeq = 0xC7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffDiffProgressiveDCT	imaged/jpeg.d	/^        HuffDiffProgressiveDCT = 0xC6,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffDiffSequentialDCT	imaged/jpeg.d	/^        HuffDiffSequentialDCT = 0xC5,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffExtSequentialDCT	imaged/jpeg.d	/^        HuffExtSequentialDCT = 0xC1,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffLosslessSeq	imaged/jpeg.d	/^        HuffLosslessSeq = 0xC3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffProgressiveDCT	imaged/jpeg.d	/^        HuffProgressiveDCT = 0xC2,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::HuffmanTableDef	imaged/jpeg.d	/^        HuffmanTableDef = 0xC4,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JPGSegment	imaged/jpeg.d	/^    struct JPGSegment$/;"	s	class:JpegDecoder	file:	access:public
JpegDecoder::JPGSegment::buffer	imaged/jpeg.d	/^        ubyte[] buffer;$/;"	m	struct:JpegDecoder::JPGSegment	file:	access:public
JpegDecoder::JPGSegment::headerLength	imaged/jpeg.d	/^        int headerLength;$/;"	m	struct:JpegDecoder::JPGSegment	file:	access:public
JpegDecoder::JPGSegment::headerProcessed	imaged/jpeg.d	/^        bool headerProcessed;$/;"	m	struct:JpegDecoder::JPGSegment	file:	access:public
JpegDecoder::JpegExt0	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt1	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt2	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt3	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt4	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt5	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt6	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt7	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt8	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExt9	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExtA	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExtB	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExtC	imaged/jpeg.d	/^        JpegExtC = 0xFC, JpegExtD = 0xFD,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::JpegExtD	imaged/jpeg.d	/^        JpegExtC = 0xFC, JpegExtD = 0xFD,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Marker	imaged/jpeg.d	/^    enum Marker$/;"	g	class:JpegDecoder	file:	access:public
JpegDecoder::NEAREST	imaged/jpeg.d	/^        NEAREST,  \/\/ Nearest neighbour (fastest)$/;"	e	enum:JpegDecoder::Upsampling	file:
JpegDecoder::None	imaged/jpeg.d	/^        None = 0x00,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::NumberOfLinesDef	imaged/jpeg.d	/^        NumberOfLinesDef = 0xDC,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::QuantTableDef	imaged/jpeg.d	/^        QuantTableDef = 0xDB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ReservedEnd	imaged/jpeg.d	/^        ReservedEnd = 0xBF$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ReservedStart	imaged/jpeg.d	/^        ReservedStart = 0x02,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::RestartIntervalDef	imaged/jpeg.d	/^        RestartIntervalDef = 0xDD,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::RestartIntervalEnd	imaged/jpeg.d	/^        RestartIntervalEnd = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::RestartIntervalStart	imaged/jpeg.d	/^        RestartIntervalStart = 0xD0,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst0	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst1	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst2	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst3	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst4	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst5	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst6	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Rst7	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::ScanState	imaged/jpeg.d	/^    struct ScanState$/;"	s	class:JpegDecoder	file:	access:public
JpegDecoder::ScanState::MCUHeight	imaged/jpeg.d	/^        int MCUWidth, MCUHeight; \/\/ Dimensions of an MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::MCUSParsed	imaged/jpeg.d	/^        int MCUSParsed; \/\/ Number of image MCU's parsed, for use with restart interval$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::MCUWidth	imaged/jpeg.d	/^        int MCUWidth, MCUHeight; \/\/ Dimensions of an MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::act	imaged/jpeg.d	/^        ubyte[3] dct, act, nCmpBlocks; \/\/ dct, act store the DC and AC table indexes for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::blockNumber	imaged/jpeg.d	/^        uint dctCmpIndex = 0, blockNumber = 0; \/\/ DCT coefficient index and current block in MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::buffer	imaged/jpeg.d	/^        uint buffer = 0, bufferLength = 0, needBits = 0;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::bufferLength	imaged/jpeg.d	/^        uint buffer = 0, bufferLength = 0, needBits = 0;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::cmpIdx	imaged/jpeg.d	/^        short cmpIdx = 0; \/\/ Current component index in scan$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::comparing	imaged/jpeg.d	/^        bool comparing = true;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::dcTerm	imaged/jpeg.d	/^        int[3] dcTerm;  \/\/ DC coefficients for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::dct	imaged/jpeg.d	/^        ubyte[3] dct, act, nCmpBlocks; \/\/ dct, act store the DC and AC table indexes for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::dctCmpIndex	imaged/jpeg.d	/^        uint dctCmpIndex = 0, blockNumber = 0; \/\/ DCT coefficient index and current block in MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::dctComponents	imaged/jpeg.d	/^        int[64] dctComponents; \/\/ DCT coefficients for current component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::nCmpBlocks	imaged/jpeg.d	/^        ubyte[3] dct, act, nCmpBlocks; \/\/ dct, act store the DC and AC table indexes for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::needBits	imaged/jpeg.d	/^        uint buffer = 0, bufferLength = 0, needBits = 0;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::nxMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::nyMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::restartInterval	imaged/jpeg.d	/^        int restartInterval; \/\/ How many MCU's are parsed before a restart (reset the DC terms)$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::xMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::ScanState::yMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::StartOfImage	imaged/jpeg.d	/^        StartOfImage = 0xD8,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::StartOfScan	imaged/jpeg.d	/^        StartOfScan = 0xDA,$/;"	e	enum:JpegDecoder::Marker	file:
JpegDecoder::Upsampling	imaged/jpeg.d	/^    enum Upsampling$/;"	g	class:JpegDecoder	file:	access:public
JpegDecoder::YCrCBtoRGB	imaged/jpeg.d	/^    void YCrCBtoRGB()$/;"	f	class:JpegDecoder	access:public	signature:()
JpegDecoder::bilinearResample	imaged/jpeg.d	/^    void bilinearResample(uint cmpIndex)$/;"	f	class:JpegDecoder	access:public	signature:(uint cmpIndex)
JpegDecoder::block_order	imaged/jpeg.d	/^    immutable static ubyte[] block_order =$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::colIDCT	imaged/jpeg.d	/^    void colIDCT(int* block)$/;"	f	class:JpegDecoder	access:public	signature:(int* block)
JpegDecoder::comment	imaged/jpeg.d	/^    char[] comment;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::components	imaged/jpeg.d	/^    Component[] components;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::Component	file:	access:public
JpegDecoder::currentMarker	imaged/jpeg.d	/^    Marker currentMarker = Marker.None;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::endOfBlock	imaged/jpeg.d	/^    void endOfBlock()$/;"	f	class:JpegDecoder	access:public	signature:()
JpegDecoder::endOfImage	imaged/jpeg.d	/^    void endOfImage()$/;"	f	class:JpegDecoder	access:public	signature:()
JpegDecoder::endOfMCU	imaged/jpeg.d	/^    void endOfMCU()$/;"	f	class:JpegDecoder	access:public	signature:()
JpegDecoder::fetchDCTComponent	imaged/jpeg.d	/^    int fetchDCTComponent(int buffer, int bufferLength, int needBits)$/;"	f	class:JpegDecoder	access:public	signature:(int buffer, int bufferLength, int needBits)
JpegDecoder::fetchHuffmanCode	imaged/jpeg.d	/^    ubyte* fetchHuffmanCode(int buffer, int bufferLength, int needBits, int componentIndex)$/;"	f	class:JpegDecoder	access:public	signature:(int buffer, int bufferLength, int needBits, int componentIndex)
JpegDecoder::format	imaged/jpeg.d	/^    string format = "unknown"; \/\/ File format (will only do JFIF)$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::hashKey	imaged/jpeg.d	/^    struct hashKey$/;"	s	class:JpegDecoder	file:	access:public
JpegDecoder::hashKey::bitCode	imaged/jpeg.d	/^        short bitCode;  \/\/ Actual bit code$/;"	m	struct:JpegDecoder::hashKey	file:	access:public
JpegDecoder::hashKey::index	imaged/jpeg.d	/^        ubyte index;    \/\/ Table index$/;"	m	struct:JpegDecoder::hashKey	file:	access:public
JpegDecoder::hashKey::nBits	imaged/jpeg.d	/^        ubyte nBits;    \/\/ Number of bits in code$/;"	m	struct:JpegDecoder::hashKey	file:	access:public
JpegDecoder::huffmanTable	imaged/jpeg.d	/^    ubyte[hashKey] huffmanTable;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::hashKey	file:	access:public
JpegDecoder::m_logging	imaged/jpeg.d	/^    bool m_logging;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::markerPending	imaged/jpeg.d	/^    bool markerPending = false;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::nCodes	imaged/jpeg.d	/^    ubyte[16] nCodes; \/\/ Number of codes of each bit length (cleared after each table is defined)$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::nComponents	imaged/jpeg.d	/^    ubyte nComponents, precision;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::nearestNeighbourResample	imaged/jpeg.d	/^    void nearestNeighbourResample(uint cmpIndex)$/;"	f	class:JpegDecoder	access:public	signature:(uint cmpIndex)
JpegDecoder::parseByte	imaged/jpeg.d	/^    override void parseByte(ubyte bite)$/;"	f	class:JpegDecoder	access:public	signature:(ubyte bite)
JpegDecoder::precision	imaged/jpeg.d	/^    ubyte nComponents, precision;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::previousMarker	imaged/jpeg.d	/^    Marker previousMarker = Marker.None;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::processHeader	imaged/jpeg.d	/^    void processHeader()$/;"	f	class:JpegDecoder	access:public	signature:()
JpegDecoder::processHuffmanCode	imaged/jpeg.d	/^    void processHuffmanCode(short huffCode)$/;"	f	class:JpegDecoder	access:public	signature:(short huffCode)
JpegDecoder::quantTable	imaged/jpeg.d	/^    ubyte[][int] quantTable;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::resampleDgt	imaged/jpeg.d	/^    void delegate(uint cmpIndex) resampleDgt;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::rowIDCT	imaged/jpeg.d	/^    void rowIDCT(int* block, ubyte* outData)$/;"	f	class:JpegDecoder	access:public	signature:(int* block, ubyte* outData)
JpegDecoder::scState	imaged/jpeg.d	/^    ScanState scState; \/\/ ditto$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::ScanState	file:	access:public
JpegDecoder::segment	imaged/jpeg.d	/^    JPGSegment segment;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::JPGSegment	file:	access:public
JpegDecoder::segmentBytesParsed	imaged/jpeg.d	/^    ulong segmentBytesParsed = 0;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::sosAction	imaged/jpeg.d	/^    void sosAction(ubyte bite)$/;"	f	class:JpegDecoder	access:public	signature:(ubyte bite)
JpegDecoder::totalBytesParsed	imaged/jpeg.d	/^    ulong totalBytesParsed = 0;$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::x	imaged/jpeg.d	/^    short x, y; \/\/ These are the final image width and height$/;"	m	class:JpegDecoder	file:	access:public
JpegDecoder::y	imaged/jpeg.d	/^    short x, y; \/\/ These are the final image width and height$/;"	m	class:JpegDecoder	file:	access:public
JpegExt0	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt1	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt2	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt3	imaged/jpeg.d	/^        JpegExt0 = 0xF0, JpegExt1 = 0xF1, JpegExt2 = 0xF2, JpegExt3 = 0xF3,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt4	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt5	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt6	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt7	imaged/jpeg.d	/^        JpegExt4 = 0xF4, JpegExt5 = 0xF5, JpegExt6 = 0xF6, JpegExt7 = 0xF7,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt8	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExt9	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExtA	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExtB	imaged/jpeg.d	/^        JpegExt8 = 0xF8, JpegExt9 = 0xF9, JpegExtA = 0xFA, JpegExtB = 0xFB,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExtC	imaged/jpeg.d	/^        JpegExtC = 0xFC, JpegExtD = 0xFD,$/;"	e	enum:JpegDecoder::Marker	file:
JpegExtD	imaged/jpeg.d	/^        JpegExtC = 0xFC, JpegExtD = 0xFD,$/;"	e	enum:JpegDecoder::Marker	file:
KeyCode	simpledisplay.d	/^alias uint KeyCode;$/;"	t	file:
KeyEvent	simpledisplay.d	/^struct KeyEvent {$/;"	s	file:
KeySym	simpledisplay.d	/^alias XID KeySym;$/;"	t	file:
L16	imaged/image.d	/^    L16,$/;"	e	enum:Px	file:
L16A16	imaged/image.d	/^    L16A16,$/;"	e	enum:Px	file:
L8	imaged/image.d	/^    L8,$/;"	e	enum:Px	file:
L8A8	imaged/image.d	/^    L8A8,$/;"	e	enum:Px	file:
LineDoubleDash	simpledisplay.d	72;"	d	file:
LineOnOffDash	simpledisplay.d	71;"	d	file:
LineSolid	simpledisplay.d	70;"	d	file:
LittleEndian	imaged/png.d	/^    version (LittleEndian)$/;"	V	file:
MCUHeight	imaged/jpeg.d	/^        int MCUWidth, MCUHeight; \/\/ Dimensions of an MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
MCUSParsed	imaged/jpeg.d	/^        int MCUSParsed; \/\/ Number of image MCU's parsed, for use with restart interval$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
MCUWidth	imaged/jpeg.d	/^        int MCUWidth, MCUHeight; \/\/ Dimensions of an MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
Marker	imaged/jpeg.d	/^    enum Marker$/;"	g	class:JpegDecoder	file:	access:public
MouseClickEvent	simpledisplay.d	/^struct MouseClickEvent {$/;"	s	file:
MouseEvent	simpledisplay.d	/^struct MouseEvent {$/;"	s	file:
MouseEvent::button	simpledisplay.d	/^	int button;$/;"	m	struct:MouseEvent	file:	access:public
MouseEvent::buttonFlags	simpledisplay.d	/^	int buttonFlags;$/;"	m	struct:MouseEvent	file:	access:public
MouseEvent::type	simpledisplay.d	/^	int type; \/\/ movement, press, release, double click$/;"	m	struct:MouseEvent	file:	access:public
MouseEvent::x	simpledisplay.d	/^	int x;$/;"	m	struct:MouseEvent	file:	access:public
MouseEvent::y	simpledisplay.d	/^	int y;$/;"	m	struct:MouseEvent	file:	access:public
MouseMoveEvent	simpledisplay.d	/^struct MouseMoveEvent {$/;"	s	file:
NEAREST	imaged/image.d	/^        NEAREST,$/;"	e	enum:Image::ResizeAlgo	file:
NEAREST	imaged/jpeg.d	/^        NEAREST,  \/\/ Nearest neighbour (fastest)$/;"	e	enum:JpegDecoder::Upsampling	file:
NONE	imaged/png.d	/^        NONE,$/;"	e	enum:PngDecoder::Chunk	file:
NativeEventHandler	simpledisplay.d	/^	alias void delegate(UINT, WPARAM, LPARAM) NativeEventHandler;$/;"	t	file:
NativeEventHandler	simpledisplay.d	/^	alias void delegate(XEvent) NativeEventHandler;$/;"	t	file:
NativeImageImplementation	simpledisplay.d	/^	mixin NativeImageImplementation!() impl;$/;"	X
NativeImageImplementation	simpledisplay.d	/^	mixin template NativeImageImplementation() {$/;"	T	file:	signature:()
NativeImageImplementation::createImage	simpledisplay.d	/^		void createImage(int width, int height) {$/;"	f	template:NativeImageImplementation	signature:(int width, int height)
NativeImageImplementation::dispose	simpledisplay.d	/^		void dispose() {$/;"	f	template:NativeImageImplementation	signature:()
NativeImageImplementation::handle	simpledisplay.d	/^		HBITMAP handle;$/;"	m	template:NativeImageImplementation	file:
NativeImageImplementation::handle	simpledisplay.d	/^		XImage* handle;$/;"	m	template:NativeImageImplementation	file:
NativeImageImplementation::rawData	simpledisplay.d	/^		byte* rawData;$/;"	m	template:NativeImageImplementation	file:
NativeImageImplementation::setPixel	simpledisplay.d	/^		void setPixel(int x, int y, Color c) {$/;"	f	template:NativeImageImplementation	signature:(int x, int y, Color c)
NativeScreenPainterImplementation	simpledisplay.d	/^		mixin NativeScreenPainterImplementation!();$/;"	X
NativeScreenPainterImplementation	simpledisplay.d	/^	mixin template NativeScreenPainterImplementation() {$/;"	T	file:	signature:()
NativeSimpleWindowImplementation	simpledisplay.d	/^	mixin NativeSimpleWindowImplementation!() impl;$/;"	X
NativeSimpleWindowImplementation	simpledisplay.d	/^	mixin template NativeSimpleWindowImplementation() {$/;"	T	file:	signature:()
NativeSimpleWindowImplementation::buffer	simpledisplay.d	/^		HBITMAP buffer;$/;"	m	template:NativeSimpleWindowImplementation	file:
NativeSimpleWindowImplementation::buffer	simpledisplay.d	/^		Pixmap buffer;$/;"	m	template:NativeSimpleWindowImplementation	file:
NativeSimpleWindowImplementation::closeWindow	simpledisplay.d	/^		void closeWindow() {$/;"	f	template:NativeSimpleWindowImplementation	signature:()
NativeSimpleWindowImplementation::createWindow	simpledisplay.d	/^		void createWindow(int width, int height, string title) {$/;"	f	template:NativeSimpleWindowImplementation	signature:(int width, int height, string title)
NativeSimpleWindowImplementation::destroyed	simpledisplay.d	/^		bool destroyed = false;$/;"	m	template:NativeSimpleWindowImplementation	file:
NativeSimpleWindowImplementation::display	simpledisplay.d	/^		Display* display;$/;"	m	template:NativeSimpleWindowImplementation	file:
NativeSimpleWindowImplementation::dispose	simpledisplay.d	/^		void dispose() {$/;"	f	template:NativeSimpleWindowImplementation	signature:()
NativeSimpleWindowImplementation::eventLoop	simpledisplay.d	/^		int eventLoop(long pulseTimeout) {$/;"	f	template:NativeSimpleWindowImplementation	signature:(long pulseTimeout)
NativeSimpleWindowImplementation::gc	simpledisplay.d	/^		GC gc;$/;"	m	template:NativeSimpleWindowImplementation	file:
NativeSimpleWindowImplementation::getPainter	simpledisplay.d	/^		ScreenPainter getPainter() {$/;"	f	template:NativeSimpleWindowImplementation	signature:()
NativeSimpleWindowImplementation::hwnd	simpledisplay.d	/^		HWND hwnd;$/;"	m	template:NativeSimpleWindowImplementation	file:
NativeSimpleWindowImplementation::window	simpledisplay.d	/^		Window window;$/;"	m	template:NativeSimpleWindowImplementation	file:
NativeSimpleWindowImplementation::windowProcedure	simpledisplay.d	/^		int windowProcedure(HWND hwnd, uint msg, WPARAM wParam, LPARAM lParam) {$/;"	f	template:NativeSimpleWindowImplementation	signature:(HWND hwnd, uint msg, WPARAM wParam, LPARAM lParam)
NativeWindowHandle	simpledisplay.d	/^	alias HWND NativeWindowHandle;$/;"	t	file:
NativeWindowHandle	simpledisplay.d	/^	alias Window NativeWindowHandle;$/;"	t	file:
None	imaged/jpeg.d	/^        None = 0x00,$/;"	e	enum:JpegDecoder::Marker	file:
NotifyHint	simpledisplay.d	/^const int NotifyHint	=1;	\/* for MotionNotify events *\/$/;"	v
NumberOfLinesDef	imaged/jpeg.d	/^        NumberOfLinesDef = 0xDC,$/;"	e	enum:JpegDecoder::Marker	file:
OBJS	Makefile	/^OBJS:=$(SRCS:%.d=%.o)$/;"	m
OpenGL	imaged/image.d	/^version(OpenGL)$/;"	V	file:
PLTE	imaged/png.d	/^        PLTE, \/\/ palette$/;"	e	enum:PngDecoder::Chunk	file:
PNG	imaged/image.d	/^    PNG,$/;"	e	enum:ImageFormat	file:
PNGChunk	imaged/png.d	/^    struct PNGChunk$/;"	s	class:PngEncoder	file:	access:public
PNGSegment	imaged/png.d	/^    struct PNGSegment$/;"	s	class:PngDecoder	file:	access:public
Pen	simpledisplay.d	/^struct Pen {$/;"	s	file:
Pen::Dashed	simpledisplay.d	/^		Dashed$/;"	e	enum:Pen::Style	file:
Pen::Solid	simpledisplay.d	/^		Solid,$/;"	e	enum:Pen::Style	file:
Pen::Style	simpledisplay.d	/^	enum Style {$/;"	g	struct:Pen	file:	access:public
Pen::color	simpledisplay.d	/^	Color color;$/;"	m	struct:Pen	file:	access:public
Pen::style	simpledisplay.d	/^	Style style;$/;"	m	struct:Pen	file:	access:public
Pen::width	simpledisplay.d	/^	int width;$/;"	m	struct:Pen	file:	access:public
Pixel	imaged/image.d	/^struct Pixel$/;"	s	file:
Pixel::a	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
Pixel::b	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
Pixel::g	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
Pixel::r	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
Pixmap	simpledisplay.d	/^	alias XID Pixmap;$/;"	t	file:
PngDecoder	imaged/png.d	/^class PngDecoder : Decoder$/;"	c	file:	inherits:Decoder
PngDecoder::Chunk	imaged/png.d	/^    enum Chunk$/;"	g	class:PngDecoder	file:	access:public
PngDecoder::IDAT	imaged/png.d	/^        IDAT, \/\/ image$/;"	e	enum:PngDecoder::Chunk	file:
PngDecoder::IEND	imaged/png.d	/^        IEND \/\/ end of image$/;"	e	enum:PngDecoder::Chunk	file:
PngDecoder::IHDR	imaged/png.d	/^        IHDR, \/\/ header$/;"	e	enum:PngDecoder::Chunk	file:
PngDecoder::InterLace	imaged/png.d	/^    struct InterLace$/;"	s	class:PngDecoder	file:	access:public
PngDecoder::InterLace::block_height	imaged/png.d	/^        int[7] block_height =   [ 8, 8, 4, 4, 2, 2, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
PngDecoder::InterLace::block_width	imaged/png.d	/^        int[7] block_width =    [ 8, 4, 4, 2, 2, 1, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
PngDecoder::InterLace::col_increment	imaged/png.d	/^        int[7] col_increment =  [ 8, 8, 4, 4, 2, 2, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
PngDecoder::InterLace::imageRow	imaged/png.d	/^        int imageRow;$/;"	m	struct:PngDecoder::InterLace	file:	access:public
PngDecoder::InterLace::row_increment	imaged/png.d	/^        int[7] row_increment =  [ 8, 8, 8, 4, 4, 2, 2 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
PngDecoder::InterLace::start_col	imaged/png.d	/^        int[7] start_col =      [ 0, 4, 0, 2, 0, 1, 0 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
PngDecoder::InterLace::start_row	imaged/png.d	/^        int[7] start_row =      [ 0, 0, 4, 0, 2, 0, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
PngDecoder::NONE	imaged/png.d	/^        NONE,$/;"	e	enum:PngDecoder::Chunk	file:
PngDecoder::PLTE	imaged/png.d	/^        PLTE, \/\/ palette$/;"	e	enum:PngDecoder::Chunk	file:
PngDecoder::PNGSegment	imaged/png.d	/^    struct PNGSegment$/;"	s	class:PngDecoder	file:	access:public
PngDecoder::PNGSegment::buffer	imaged/png.d	/^        ubyte[] buffer;$/;"	m	struct:PngDecoder::PNGSegment	file:	access:public
PngDecoder::PNGSegment::chunkLength	imaged/png.d	/^        int chunkLength;$/;"	m	struct:PngDecoder::PNGSegment	file:	access:public
PngDecoder::PNGSegment::chunkType	imaged/png.d	/^        Chunk chunkType = Chunk.NONE;$/;"	m	struct:PngDecoder::PNGSegment	file:	access:public
PngDecoder::allocateImage	imaged/png.d	/^    void allocateImage()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::checkSum	imaged/png.d	/^    uint checkSum;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::convertPaletteToRGB	imaged/png.d	/^    ubyte[] convertPaletteToRGB(ubyte[] data)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] data)
PngDecoder::filter	imaged/png.d	/^    void filter()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::filter1	imaged/png.d	/^    void filter1()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::filter2	imaged/png.d	/^    void filter2()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::filter3	imaged/png.d	/^    void filter3()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::filter4	imaged/png.d	/^    void filter4()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::fourBytesToInt	imaged/png.d	/^    int fourBytesToInt(ubyte[] bytes)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] bytes)
PngDecoder::m_bitDepth	imaged/png.d	/^    int m_bitDepth,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_bytesPerScanline	imaged/png.d	/^        m_bytesPerScanline,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_colorType	imaged/png.d	/^        m_colorType,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_compression	imaged/png.d	/^        m_compression,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_currentScanLine	imaged/png.d	/^    int m_currentScanLine;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_filter	imaged/png.d	/^        m_filter,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_haveHeader	imaged/png.d	/^    bool m_haveHeader = false;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_height	imaged/png.d	/^    int m_width, m_height;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_ilace	imaged/png.d	/^    InterLace m_ilace;$/;"	m	class:PngDecoder	typeref:struct:PngDecoder::InterLace	file:	access:public
PngDecoder::m_interlace	imaged/png.d	/^        m_interlace,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_interlacePass	imaged/png.d	/^    ubyte m_interlacePass = 0;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_nChannels	imaged/png.d	/^        m_nChannels,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_palette	imaged/png.d	/^    ubyte[] m_palette;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_pendingChunk	imaged/png.d	/^    bool m_pendingChunk = false;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_pixPerLine	imaged/png.d	/^    int[7] m_pixPerLine;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_pixelScale	imaged/png.d	/^        m_pixelScale;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_previousChunk	imaged/png.d	/^    Chunk m_previousChunk = Chunk.NONE;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_scanLines	imaged/png.d	/^    int[7] m_scanLines;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_stride	imaged/png.d	/^        m_stride,$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_totalBytesParsed	imaged/png.d	/^    uint m_totalBytesParsed;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::m_width	imaged/png.d	/^    int m_width, m_height;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::parseByte	imaged/png.d	/^    override void parseByte(ubyte bite)$/;"	f	class:PngDecoder	access:public	signature:(ubyte bite)
PngDecoder::passInfo	imaged/png.d	/^    void passInfo(out int bytesPerLine, out int nscanLines)$/;"	f	class:PngDecoder	access:public	signature:(out int bytesPerLine, out int nscanLines)
PngDecoder::processChunk	imaged/png.d	/^    void processChunk()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::scanLine1	imaged/png.d	/^    ubyte[] scanLine1, scanLine2;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::scanLine2	imaged/png.d	/^    ubyte[] scanLine1, scanLine2;$/;"	m	class:PngDecoder	file:	access:public
PngDecoder::segment	imaged/png.d	/^    PNGSegment segment;$/;"	m	class:PngDecoder	typeref:struct:PngDecoder::PNGSegment	file:	access:public
PngDecoder::setInterlace	imaged/png.d	/^    void setInterlace()$/;"	f	class:PngDecoder	access:public	signature:()
PngDecoder::uncompressStream	imaged/png.d	/^    void uncompressStream(ubyte[] stream, bool finalize = false)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] stream, bool finalize = false)
PngDecoder::unpackBits	imaged/png.d	/^    ubyte[] unpackBits(ubyte[] data)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] data)
PngDecoder::zliber	imaged/png.d	/^    UnCompress zliber;$/;"	m	class:PngDecoder	file:	access:public
PngEncoder	imaged/png.d	/^class PngEncoder : Encoder$/;"	c	file:	inherits:Decoder,Encoder
PngEncoder::LittleEndian	imaged/png.d	/^    version (LittleEndian)$/;"	V	file:
PngEncoder::PNGChunk	imaged/png.d	/^    struct PNGChunk$/;"	s	class:PngEncoder	file:	access:public
PngEncoder::PNGChunk::data	imaged/png.d	/^        ubyte[] data;$/;"	m	struct:PngEncoder::PNGChunk	file:	access:public
PngEncoder::PNGChunk::type	imaged/png.d	/^        string type;$/;"	m	struct:PngEncoder::PNGChunk	file:	access:public
PngEncoder::appendChunk	imaged/png.d	/^    void appendChunk(in PNGChunk chunk, ref ubyte[] data)$/;"	f	class:PngEncoder	access:public	signature:(in PNGChunk chunk, ref ubyte[] data)
PngEncoder::bigEndian	imaged/png.d	/^        uint bigEndian(uint value)$/;"	f	signature:(uint value)
PngEncoder::bigEndianBytes	imaged/png.d	/^    ubyte[] bigEndianBytes(uint value)$/;"	f	class:PngEncoder	access:public	signature:(uint value)
PngEncoder::createHeaderChunk	imaged/png.d	/^    PNGChunk createHeaderChunk(in Image img)$/;"	f	class:PngEncoder	access:public	signature:(in Image img)
PngEncoder::filter	imaged/png.d	/^    static ubyte[] filter(in Image img, in ubyte[] scanLine1, ubyte[] scanLine2, out ubyte filterType)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, ubyte[] scanLine2, out ubyte filterType)
PngEncoder::filter0	imaged/png.d	/^    static ubyte[] filter0(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
PngEncoder::filter1	imaged/png.d	/^    static ubyte[] filter1(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
PngEncoder::filter2	imaged/png.d	/^    static ubyte[] filter2(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
PngEncoder::filter3	imaged/png.d	/^    static ubyte[] filter3(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
PngEncoder::filter4	imaged/png.d	/^    static ubyte[] filter4(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
PngEncoder::getColorType	imaged/png.d	/^    ubyte getColorType(in Image img)$/;"	f	class:PngEncoder	access:public	signature:(in Image img)
PngEncoder::m_filters	imaged/png.d	/^    static ubyte[] function(in Image, in ubyte[], in ubyte[], out uint)[5] m_filters =$/;"	m	class:PngEncoder	file:	access:public
PngEncoder::write	imaged/png.d	/^    override bool write(in Image img, string filename)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, string filename)
Point	simpledisplay.d	/^struct Point {$/;"	s	file:
Point::x	simpledisplay.d	/^	int x;$/;"	m	struct:Point	file:	access:public
Point::y	simpledisplay.d	/^	int y;$/;"	m	struct:Point	file:	access:public
Px	imaged/image.d	/^enum Px$/;"	g	file:
Q	session.vim	/^map Q gq$/;"	m
QuantTableDef	imaged/jpeg.d	/^        QuantTableDef = 0xDB,$/;"	e	enum:JpegDecoder::Marker	file:
R16G16B16	imaged/image.d	/^    R16G16B16,$/;"	e	enum:Px	file:
R16G16B16A16	imaged/image.d	/^    R16G16B16A16$/;"	e	enum:Px	file:
R8G8B8	imaged/image.d	/^    R8G8B8,$/;"	e	enum:Px	file:
R8G8B8A8	imaged/image.d	/^    R8G8B8A8,$/;"	e	enum:Px	file:
ReservedEnd	imaged/jpeg.d	/^        ReservedEnd = 0xBF$/;"	e	enum:JpegDecoder::Marker	file:
ReservedStart	imaged/jpeg.d	/^        ReservedStart = 0x02,$/;"	e	enum:JpegDecoder::Marker	file:
ResizeAlgo	imaged/image.d	/^    enum ResizeAlgo {$/;"	g	virtual:Image	file:	access:public
RestartIntervalDef	imaged/jpeg.d	/^        RestartIntervalDef = 0xDD,$/;"	e	enum:JpegDecoder::Marker	file:
RestartIntervalEnd	imaged/jpeg.d	/^        RestartIntervalEnd = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
RestartIntervalStart	imaged/jpeg.d	/^        RestartIntervalStart = 0xD0,$/;"	e	enum:JpegDecoder::Marker	file:
RootWindow	simpledisplay.d	/^	Window	RootWindow(Display *dpy,int scr) {$/;"	f	signature:(Display *dpy,int scr)
Rst0	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
Rst1	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
Rst2	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
Rst3	imaged/jpeg.d	/^        Rst0 = 0xD0, Rst1 = 0xD1, Rst2 = 0xD2, Rst3 = 0xD3,$/;"	e	enum:JpegDecoder::Marker	file:
Rst4	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
Rst5	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
Rst6	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
Rst7	imaged/jpeg.d	/^        Rst4 = 0xD4, Rst5 = 0xD5, Rst6 = 0xD6, Rst7 = 0xD7,$/;"	e	enum:JpegDecoder::Marker	file:
SRCS	Makefile	/^SRCS:=\\$/;"	m
ScanState	imaged/jpeg.d	/^    struct ScanState$/;"	s	class:JpegDecoder	file:	access:public
Screen	simpledisplay.d	/^struct Screen{$/;"	s	file:
Screen::backing_store	simpledisplay.d	/^	int backing_store;		\/* Never, WhenMapped, Always *\/$/;"	m	struct:Screen	file:	access:public
Screen::black_pixel	simpledisplay.d	/^	uint black_pixel;		\/* White and Black pixel values *\/$/;"	m	struct:Screen	file:	access:public
Screen::cmap	simpledisplay.d	/^	Colormap cmap;			\/* default color map *\/$/;"	m	struct:Screen	file:	access:public
Screen::default_gc	simpledisplay.d	/^	GC default_gc;			\/* GC for the root root visual *\/$/;"	m	struct:Screen	file:	access:public
Screen::depths	simpledisplay.d	/^	Depth *depths;			\/* list of allowable depths on the screen *\/$/;"	m	struct:Screen	file:	access:public
Screen::display	simpledisplay.d	/^	Display *display;		\/* back pointer to display structure *\/$/;"	m	struct:Screen	file:	access:public
Screen::ext_data	simpledisplay.d	/^	XExtData *ext_data;		\/* hook for extension to hang data *\/$/;"	m	struct:Screen	file:	access:public
Screen::height	simpledisplay.d	/^	int width, height;		\/* width and height of screen *\/$/;"	m	struct:Screen	file:	access:public
Screen::max_maps	simpledisplay.d	/^	int max_maps, min_maps;	\/* max and min color maps *\/$/;"	m	struct:Screen	file:	access:public
Screen::mheight	simpledisplay.d	/^	int mwidth, mheight;	\/* width and height of  in millimeters *\/$/;"	m	struct:Screen	file:	access:public
Screen::min_maps	simpledisplay.d	/^	int max_maps, min_maps;	\/* max and min color maps *\/$/;"	m	struct:Screen	file:	access:public
Screen::mwidth	simpledisplay.d	/^	int mwidth, mheight;	\/* width and height of  in millimeters *\/$/;"	m	struct:Screen	file:	access:public
Screen::ndepths	simpledisplay.d	/^	int ndepths;			\/* number of depths possible *\/$/;"	m	struct:Screen	file:	access:public
Screen::root	simpledisplay.d	/^	Window root;			\/* Root window id. *\/$/;"	m	struct:Screen	file:	access:public
Screen::root_depth	simpledisplay.d	/^	int root_depth;			\/* bits per pixel *\/$/;"	m	struct:Screen	file:	access:public
Screen::root_input_mask	simpledisplay.d	/^	int root_input_mask;	\/* initial root input mask *\/$/;"	m	struct:Screen	file:	access:public
Screen::root_visual	simpledisplay.d	/^	Visual *root_visual;	\/* root visual *\/$/;"	m	struct:Screen	file:	access:public
Screen::save_unders	simpledisplay.d	/^	bool save_unders;$/;"	m	struct:Screen	file:	access:public
Screen::white_pixel	simpledisplay.d	/^	uint white_pixel;$/;"	m	struct:Screen	file:	access:public
Screen::width	simpledisplay.d	/^	int width, height;		\/* width and height of screen *\/$/;"	m	struct:Screen	file:	access:public
ScreenFormat	simpledisplay.d	/^	alias void ScreenFormat;$/;"	t	file:
ScreenOfDisplay	simpledisplay.d	/^	Screen* ScreenOfDisplay(Display* dpy, int scr) {$/;"	f	signature:(Display* dpy, int scr)
ScreenPainter	simpledisplay.d	/^struct ScreenPainter {$/;"	s	file:
ScreenPainter::clear	simpledisplay.d	/^	void clear() {$/;"	f	struct:ScreenPainter	access:public	signature:()
ScreenPainter::drawArc	simpledisplay.d	/^	void drawArc(Point upperLeft, int width, int height, int start, int finish) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, int width, int height, int start, int finish)
ScreenPainter::drawEllipse	simpledisplay.d	/^	void drawEllipse(Point upperLeft, Point lowerRight) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, Point lowerRight)
ScreenPainter::drawImage	simpledisplay.d	/^	void drawImage(Point upperLeft, Image i) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, Image i)
ScreenPainter::drawLine	simpledisplay.d	/^	void drawLine(Point starting, Point ending) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point starting, Point ending)
ScreenPainter::drawPixel	simpledisplay.d	/^	void drawPixel(Point where) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point where)
ScreenPainter::drawPolygon	simpledisplay.d	/^	void drawPolygon(Point[] vertexes) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point[] vertexes)
ScreenPainter::drawRectangle	simpledisplay.d	/^	void drawRectangle(Point upperLeft, int width, int height) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, int width, int height)
ScreenPainter::drawText	simpledisplay.d	/^	void drawText(Point upperLeft, string text) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, string text)
ScreenPainter::fillColor	simpledisplay.d	/^	@property void fillColor(Color c) {$/;"	f	struct:ScreenPainter	access:public	signature:(Color c)
ScreenPainter::impl	simpledisplay.d	/^	ScreenPainterImplementation* impl;$/;"	m	struct:ScreenPainter	file:	access:public
ScreenPainter::outlineColor	simpledisplay.d	/^	@property void outlineColor(Color c) {$/;"	f	struct:ScreenPainter	access:public	signature:(Color c)
ScreenPainter::updateDisplay	simpledisplay.d	/^	void updateDisplay() {$/;"	f	struct:ScreenPainter	access:public	signature:()
ScreenPainter::window	simpledisplay.d	/^	SimpleWindow window;$/;"	m	struct:ScreenPainter	file:	access:public
ScreenPainter::~this	simpledisplay.d	/^	~this() {$/;"	f	struct:ScreenPainter	access:public	signature:()
ScreenPainterImplementation	simpledisplay.d	/^	struct ScreenPainterImplementation {$/;"	s	file:
ScreenPainterImplementation::NativeScreenPainterImplementation	simpledisplay.d	/^		mixin NativeScreenPainterImplementation!();$/;"	X
ScreenPainterImplementation::referenceCount	simpledisplay.d	/^		int referenceCount;$/;"	m	struct:ScreenPainterImplementation	file:	access:public
ScreenPainterImplementation::window	simpledisplay.d	/^		SimpleWindow window;$/;"	m	struct:ScreenPainterImplementation	file:	access:public
SessionLoad	session.vim	/^let SessionLoad = 1$/;"	v
SimpleWindow	simpledisplay.d	/^class SimpleWindow {$/;"	c	file:
SimpleWindow::NativeSimpleWindowImplementation	simpledisplay.d	/^	mixin NativeSimpleWindowImplementation!() impl;$/;"	X
SimpleWindow::activeScreenPainter	simpledisplay.d	/^	private ScreenPainterImplementation* activeScreenPainter;$/;"	m	class:SimpleWindow	file:	access:private
SimpleWindow::backingImage	simpledisplay.d	/^	Image backingImage;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::close	simpledisplay.d	/^	void close() {$/;"	f	class:SimpleWindow	access:public	signature:()
SimpleWindow::draw	simpledisplay.d	/^	ScreenPainter draw() {$/;"	f	class:SimpleWindow	access:public	signature:()
SimpleWindow::eventLoop	simpledisplay.d	/^	final int eventLoop(T...)($/;"	f	class:SimpleWindow	access:public	signature:(T....)
SimpleWindow::handleCharEvent	simpledisplay.d	/^	void delegate(dchar c) handleCharEvent;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::handleKeyEvent	simpledisplay.d	/^	void delegate(int key) handleKeyEvent;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::handleMouseEvent	simpledisplay.d	/^	void delegate(MouseEvent) handleMouseEvent;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::handleNativeEvent	simpledisplay.d	/^	NativeEventHandler handleNativeEvent;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::handlePulse	simpledisplay.d	/^	void delegate() handlePulse;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::height	simpledisplay.d	/^	int height;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::image	simpledisplay.d	/^	@property void image(Image i) {$/;"	f	class:SimpleWindow	access:public	signature:(Image i)
SimpleWindow::impl	simpledisplay.d	/^	mixin NativeSimpleWindowImplementation!() impl;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::width	simpledisplay.d	/^	int width;$/;"	m	class:SimpleWindow	file:	access:public
SimpleWindow::~this	simpledisplay.d	/^	~this() {$/;"	f	class:SimpleWindow	access:public	signature:()
Size	simpledisplay.d	/^struct Size {$/;"	s	file:
Size::height	simpledisplay.d	/^	int height;$/;"	m	struct:Size	file:	access:public
Size::width	simpledisplay.d	/^	int width;$/;"	m	struct:Size	file:	access:public
Solid	simpledisplay.d	/^		Solid,$/;"	e	enum:Pen::Style	file:
StartOfImage	imaged/jpeg.d	/^        StartOfImage = 0xD8,$/;"	e	enum:JpegDecoder::Marker	file:
StartOfScan	imaged/jpeg.d	/^        StartOfScan = 0xDA,$/;"	e	enum:JpegDecoder::Marker	file:
Status	simpledisplay.d	/^alias int Status;$/;"	t	file:
Style	simpledisplay.d	/^	enum Style {$/;"	g	struct:Pen	file:	access:public
Time	simpledisplay.d	/^	alias uint Time;$/;"	t	file:
Upsampling	imaged/jpeg.d	/^    enum Upsampling$/;"	g	class:JpegDecoder	file:	access:public
Visual	simpledisplay.d	/^struct Visual$/;"	s	file:
Visual::bits_per_rgb	simpledisplay.d	/^	int bits_per_rgb;	\/* log base 2 of distinct color values *\/$/;"	m	struct:Visual	file:	access:public
Visual::blue_mask	simpledisplay.d	/^	uint red_mask, green_mask, blue_mask;	\/* mask values *\/$/;"	m	struct:Visual	file:	access:public
Visual::class_	simpledisplay.d	/^	int class_;			\/* class of screen (monochrome, etc.) *\/$/;"	m	struct:Visual	file:	access:public
Visual::ext_data	simpledisplay.d	/^	XExtData *ext_data;	\/* hook for extension to hang data *\/$/;"	m	struct:Visual	file:	access:public
Visual::green_mask	simpledisplay.d	/^	uint red_mask, green_mask, blue_mask;	\/* mask values *\/$/;"	m	struct:Visual	file:	access:public
Visual::map_entries	simpledisplay.d	/^	int map_entries;	\/* color map entries *\/$/;"	m	struct:Visual	file:	access:public
Visual::red_mask	simpledisplay.d	/^	uint red_mask, green_mask, blue_mask;	\/* mask values *\/$/;"	m	struct:Visual	file:	access:public
Visual::visualid	simpledisplay.d	/^	VisualID visualid;	\/* visual id of this visual *\/$/;"	m	struct:Visual	file:	access:public
VisualID	simpledisplay.d	/^alias int VisualID;$/;"	t	file:
WhitePixel	simpledisplay.d	/^	uint WhitePixel(Display *dpy,int scr) {$/;"	f	signature:(Display *dpy,int scr)
Window	simpledisplay.d	/^	alias XID Window;$/;"	t	file:
Windows	simpledisplay.d	/^version(Windows) {$/;"	V	file:
X11	simpledisplay.d	/^else version(X11) {$/;"	V	file:
X11	simpledisplay.d	/^version(X11) {$/;"	V	file:
XA_STRING	simpledisplay.d	/^	enum Atom XA_STRING = 31;$/;"	v	typeref:enum:Atom
XAnyEvent	simpledisplay.d	/^struct XAnyEvent$/;"	s	file:
XAnyEvent::display	simpledisplay.d	/^	Display *display;\/* Display the event was read from *\/$/;"	m	struct:XAnyEvent	file:	access:public
XAnyEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XAnyEvent	file:	access:public
XAnyEvent::serial	simpledisplay.d	/^	ubyte serial;	\/* # of last request processed by server *\/$/;"	m	struct:XAnyEvent	file:	access:public
XAnyEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XAnyEvent	file:	access:public
XAnyEvent::window	simpledisplay.d	/^	Window window;	\/* window on which event was requested in event mask *\/$/;"	m	struct:XAnyEvent	file:	access:public
XButtonEvent	simpledisplay.d	/^struct XButtonEvent$/;"	s	file:
XButtonEvent::button	simpledisplay.d	/^	uint button;	\/* detail *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::type	simpledisplay.d	/^	int type;		\/* of event *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::window	simpledisplay.d	/^	Window window;	        \/* "event" window it is reported relative to *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonEvent::y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XButtonEvent	file:	access:public
XButtonPressedEvent	simpledisplay.d	/^alias XButtonEvent XButtonPressedEvent;$/;"	t	file:
XButtonReleasedEvent	simpledisplay.d	/^alias XButtonEvent XButtonReleasedEvent;$/;"	t	file:
XCirculateEvent	simpledisplay.d	/^struct XCirculateEvent$/;"	s	file:
XCirculateEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCirculateEvent	file:	access:public
XCirculateEvent::event	simpledisplay.d	/^	Window event;$/;"	m	struct:XCirculateEvent	file:	access:public
XCirculateEvent::place	simpledisplay.d	/^	CirculationRequest place;		\/* PlaceOnTop, PlaceOnBottom *\/$/;"	m	struct:XCirculateEvent	file:	access:public
XCirculateEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCirculateEvent	file:	access:public
XCirculateEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCirculateEvent	file:	access:public
XCirculateEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XCirculateEvent	file:	access:public
XCirculateEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XCirculateEvent	file:	access:public
XCirculateRequestEvent	simpledisplay.d	/^struct XCirculateRequestEvent$/;"	s	file:
XCirculateRequestEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
XCirculateRequestEvent::parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XCirculateRequestEvent	file:	access:public
XCirculateRequestEvent::place	simpledisplay.d	/^	CirculationRequest place;		\/* PlaceOnTop, PlaceOnBottom *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
XCirculateRequestEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
XCirculateRequestEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
XCirculateRequestEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XCirculateRequestEvent	file:	access:public
XCirculateRequestEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XCirculateRequestEvent	file:	access:public
XClientMessageEvent	simpledisplay.d	/^struct XClientMessageEvent$/;"	s	file:
XClientMessageEvent::data	simpledisplay.d	/^	union data{$/;"	u	struct:XClientMessageEvent	file:	access:public
XClientMessageEvent::data::b	simpledisplay.d	/^		byte b[20];$/;"	m	union:XClientMessageEvent::data	file:	access:public
XClientMessageEvent::data::l	simpledisplay.d	/^		int l[5];$/;"	m	union:XClientMessageEvent::data	file:	access:public
XClientMessageEvent::data::s	simpledisplay.d	/^		short s[10];$/;"	m	union:XClientMessageEvent::data	file:	access:public
XClientMessageEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XClientMessageEvent	file:	access:public
XClientMessageEvent::format	simpledisplay.d	/^	int format;$/;"	m	struct:XClientMessageEvent	file:	access:public
XClientMessageEvent::message_type	simpledisplay.d	/^	Atom message_type;$/;"	m	struct:XClientMessageEvent	file:	access:public
XClientMessageEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XClientMessageEvent	file:	access:public
XClientMessageEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XClientMessageEvent	file:	access:public
XClientMessageEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XClientMessageEvent	file:	access:public
XClientMessageEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XClientMessageEvent	file:	access:public
XCloseDisplay	simpledisplay.d	/^int XCloseDisplay(Display*);$/;"	p	file:	signature:(Display*)
XColormapEvent	simpledisplay.d	/^struct XColormapEvent$/;"	s	file:
XColormapEvent::colormap	simpledisplay.d	/^	Colormap colormap;	\/* COLORMAP or None *\/$/;"	m	struct:XColormapEvent	file:	access:public
XColormapEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XColormapEvent	file:	access:public
XColormapEvent::new_	simpledisplay.d	/^	Bool new_;		\/* C++ *\/$/;"	m	struct:XColormapEvent	file:	access:public
XColormapEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XColormapEvent	file:	access:public
XColormapEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XColormapEvent	file:	access:public
XColormapEvent::state	simpledisplay.d	/^	ColorMapNotification state;		\/* ColormapInstalled, ColormapUninstalled *\/$/;"	m	struct:XColormapEvent	file:	access:public
XColormapEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XColormapEvent	file:	access:public
XColormapEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XColormapEvent	file:	access:public
XConfigureEvent	simpledisplay.d	/^struct XConfigureEvent$/;"	s	file:
XConfigureEvent::above	simpledisplay.d	/^	Window above;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::border_width	simpledisplay.d	/^	int border_width;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::event	simpledisplay.d	/^	Window event;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::override_redirect	simpledisplay.d	/^	Bool override_redirect;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureEvent::y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureEvent	file:	access:public
XConfigureRequestEvent	simpledisplay.d	/^struct  XConfigureRequestEvent$/;"	s	file:
XConfigureRequestEvent::above	simpledisplay.d	/^	Window above;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::border_width	simpledisplay.d	/^	int border_width;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::detail	simpledisplay.d	/^	WindowStackingMethod detail;		\/* Above, Below, TopIf, BottomIf, Opposite *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::value_mask	simpledisplay.d	/^	uint value_mask;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XConfigureRequestEvent::y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
XCopyArea	simpledisplay.d	/^	int XCopyArea(Display*, Drawable, Drawable, GC, int, int, uint, uint, int, int);$/;"	p	file:	signature:(Display*, Drawable, Drawable, GC, int, int, uint, uint, int, int)
XCopyGC	simpledisplay.d	/^	int XCopyGC(Display*, GC, uint, GC);$/;"	p	file:	signature:(Display*, GC, uint, GC)
XCreateGC	simpledisplay.d	/^	GC XCreateGC(Display*, Drawable, uint, void*);$/;"	p	file:	signature:(Display*, Drawable, uint, void*)
XCreateImage	simpledisplay.d	/^XImage *XCreateImage($/;"	p	file:	signature:( Display* , Visual* , uint , int , int , byte* , uint , uint , int , int )
XCreatePixmap	simpledisplay.d	/^	Pixmap XCreatePixmap(Display*, Drawable, uint, uint, uint);$/;"	p	file:	signature:(Display*, Drawable, uint, uint, uint)
XCreateSimpleWindow	simpledisplay.d	/^Window XCreateSimpleWindow($/;"	p	file:	signature:( Display* , Window , int , int , uint , uint , uint , uint , uint )
XCreateWindowEvent	simpledisplay.d	/^struct XCreateWindowEvent{$/;"	s	file:
XCreateWindowEvent::border_width	simpledisplay.d	/^	int border_width;	\/* border width *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::height	simpledisplay.d	/^	int width, height;	\/* size of window *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::override_redirect	simpledisplay.d	/^	Bool override_redirect;	\/* creation should be overridden *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::parent	simpledisplay.d	/^	Window parent;		\/* parent of the window *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::width	simpledisplay.d	/^	int width, height;	\/* size of window *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::window	simpledisplay.d	/^	Window window;		\/* window id of window created *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::x	simpledisplay.d	/^	int x, y;		\/* window location *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCreateWindowEvent::y	simpledisplay.d	/^	int x, y;		\/* window location *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
XCrossingEvent	simpledisplay.d	/^struct XCrossingEvent{$/;"	s	file:
XCrossingEvent::detail	simpledisplay.d	/^	NotifyDetail detail;$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::focus	simpledisplay.d	/^	Bool focus;		\/* Boolean focus *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::mode	simpledisplay.d	/^	NotifyModes mode;		\/* NotifyNormal, NotifyGrab, NotifyUngrab *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::type	simpledisplay.d	/^	int type;		\/* of event *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::window	simpledisplay.d	/^	Window window;	        \/* "event" window reported relative to *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XCrossingEvent::y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XCrossingEvent	file:	access:public
XDestroyImage	simpledisplay.d	/^int XDestroyImage($/;"	p	file:	signature:( XImage*)
XDestroyWindow	simpledisplay.d	/^int XDestroyWindow($/;"	p	file:	signature:( Display* , Window )
XDestroyWindowEvent	simpledisplay.d	/^struct XDestroyWindowEvent$/;"	s	file:
XDestroyWindowEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XDestroyWindowEvent	file:	access:public
XDestroyWindowEvent::event	simpledisplay.d	/^	Window event;$/;"	m	struct:XDestroyWindowEvent	file:	access:public
XDestroyWindowEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XDestroyWindowEvent	file:	access:public
XDestroyWindowEvent::serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XDestroyWindowEvent	file:	access:public
XDestroyWindowEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XDestroyWindowEvent	file:	access:public
XDestroyWindowEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XDestroyWindowEvent	file:	access:public
XDisplay	simpledisplay.d	/^	alias Display XDisplay;$/;"	t	file:
XDisplayConnection	simpledisplay.d	/^	class XDisplayConnection {$/;"	c	file:
XDisplayConnection::close	simpledisplay.d	/^		static void close() {$/;"	f	class:XDisplayConnection	access:public	signature:()
XDisplayConnection::display	simpledisplay.d	/^		private static Display* display;$/;"	m	class:XDisplayConnection	file:	access:public
XDisplayConnection::get	simpledisplay.d	/^		static Display* get() {$/;"	f	class:XDisplayConnection	access:public	signature:()
XDrawArc	simpledisplay.d	/^	int XDrawArc(Display*, Drawable, GC, int, int, uint, uint, int, int);$/;"	p	file:	signature:(Display*, Drawable, GC, int, int, uint, uint, int, int)
XDrawLine	simpledisplay.d	/^	int XDrawLine(Display*, Drawable, GC, int, int, int, int);$/;"	p	file:	signature:(Display*, Drawable, GC, int, int, int, int)
XDrawLines	simpledisplay.d	/^	int XDrawLines(Display*, Drawable, GC, XPoint*, int, CoordMode);$/;"	p	file:	signature:(Display*, Drawable, GC, XPoint*, int, CoordMode)
XDrawPoint	simpledisplay.d	/^	int XDrawPoint(Display*, Drawable, GC, int, int);$/;"	p	file:	signature:(Display*, Drawable, GC, int, int)
XDrawRectangle	simpledisplay.d	/^	int XDrawRectangle(Display*, Drawable, GC, int, int, uint, uint);$/;"	p	file:	signature:(Display*, Drawable, GC, int, int, uint, uint)
XDrawString	simpledisplay.d	/^	int XDrawString(Display*, Drawable, GC, int, int, in char*, int);$/;"	p	file:	signature:(Display*, Drawable, GC, int, int, in char*, int)
XEnterWindowEvent	simpledisplay.d	/^alias XCrossingEvent XEnterWindowEvent;$/;"	t	file:
XErrorEvent	simpledisplay.d	/^struct XErrorEvent$/;"	s	file:
XErrorEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XErrorEvent	file:	access:public
XErrorEvent::error_code	simpledisplay.d	/^	uint error_code;	\/* error code of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
XErrorEvent::minor_code	simpledisplay.d	/^	ubyte minor_code;	\/* Minor op-code of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
XErrorEvent::request_code	simpledisplay.d	/^	ubyte request_code;	\/* Major op-code of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
XErrorEvent::resourceid	simpledisplay.d	/^	XID resourceid;		\/* resource id *\/$/;"	m	struct:XErrorEvent	file:	access:public
XErrorEvent::serial	simpledisplay.d	/^	uint serial;	\/* serial number of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
XErrorEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XErrorEvent	file:	access:public
XEvent	simpledisplay.d	/^union XEvent{$/;"	u	file:
XEvent::pad	simpledisplay.d	/^	int pad[24];$/;"	m	union:XEvent	file:	access:public
XEvent::type	simpledisplay.d	/^    int type;		\/* must not be changed; first element *\/$/;"	m	union:XEvent	file:	access:public
XEvent::xany	simpledisplay.d	/^	XAnyEvent xany;$/;"	m	union:XEvent	file:	access:public
XEvent::xbutton	simpledisplay.d	/^	XButtonEvent xbutton;$/;"	m	union:XEvent	file:	access:public
XEvent::xcirculate	simpledisplay.d	/^	XCirculateEvent xcirculate;$/;"	m	union:XEvent	file:	access:public
XEvent::xcirculaterequest	simpledisplay.d	/^	XCirculateRequestEvent xcirculaterequest;$/;"	m	union:XEvent	file:	access:public
XEvent::xclient	simpledisplay.d	/^	XClientMessageEvent xclient;$/;"	m	union:XEvent	file:	access:public
XEvent::xcolormap	simpledisplay.d	/^	XColormapEvent xcolormap;$/;"	m	union:XEvent	file:	access:public
XEvent::xconfigure	simpledisplay.d	/^	XConfigureEvent xconfigure;$/;"	m	union:XEvent	file:	access:public
XEvent::xconfigurerequest	simpledisplay.d	/^	XConfigureRequestEvent xconfigurerequest;$/;"	m	union:XEvent	file:	access:public
XEvent::xcreatewindow	simpledisplay.d	/^	XCreateWindowEvent xcreatewindow;$/;"	m	union:XEvent	file:	access:public
XEvent::xcrossing	simpledisplay.d	/^	XCrossingEvent xcrossing;$/;"	m	union:XEvent	file:	access:public
XEvent::xdestroywindow	simpledisplay.d	/^	XDestroyWindowEvent xdestroywindow;$/;"	m	union:XEvent	file:	access:public
XEvent::xerror	simpledisplay.d	/^	XErrorEvent xerror;$/;"	m	union:XEvent	file:	access:public
XEvent::xexpose	simpledisplay.d	/^	XExposeEvent xexpose;$/;"	m	union:XEvent	file:	access:public
XEvent::xfocus	simpledisplay.d	/^	XFocusChangeEvent xfocus;$/;"	m	union:XEvent	file:	access:public
XEvent::xgraphicsexpose	simpledisplay.d	/^	XGraphicsExposeEvent xgraphicsexpose;$/;"	m	union:XEvent	file:	access:public
XEvent::xgravity	simpledisplay.d	/^	XGravityEvent xgravity;$/;"	m	union:XEvent	file:	access:public
XEvent::xkey	simpledisplay.d	/^	XKeyEvent xkey;$/;"	m	union:XEvent	file:	access:public
XEvent::xkeymap	simpledisplay.d	/^	XKeymapEvent xkeymap;$/;"	m	union:XEvent	file:	access:public
XEvent::xmap	simpledisplay.d	/^	XMapEvent xmap;$/;"	m	union:XEvent	file:	access:public
XEvent::xmapping	simpledisplay.d	/^	XMappingEvent xmapping;$/;"	m	union:XEvent	file:	access:public
XEvent::xmaprequest	simpledisplay.d	/^	XMapRequestEvent xmaprequest;$/;"	m	union:XEvent	file:	access:public
XEvent::xmotion	simpledisplay.d	/^	XMotionEvent xmotion;$/;"	m	union:XEvent	file:	access:public
XEvent::xnoexpose	simpledisplay.d	/^	XNoExposeEvent xnoexpose;$/;"	m	union:XEvent	file:	access:public
XEvent::xproperty	simpledisplay.d	/^	XPropertyEvent xproperty;$/;"	m	union:XEvent	file:	access:public
XEvent::xreparent	simpledisplay.d	/^	XReparentEvent xreparent;$/;"	m	union:XEvent	file:	access:public
XEvent::xresizerequest	simpledisplay.d	/^	XResizeRequestEvent xresizerequest;$/;"	m	union:XEvent	file:	access:public
XEvent::xselection	simpledisplay.d	/^	XSelectionEvent xselection;$/;"	m	union:XEvent	file:	access:public
XEvent::xselectionclear	simpledisplay.d	/^	XSelectionClearEvent xselectionclear;$/;"	m	union:XEvent	file:	access:public
XEvent::xselectionrequest	simpledisplay.d	/^	XSelectionRequestEvent xselectionrequest;$/;"	m	union:XEvent	file:	access:public
XEvent::xunmap	simpledisplay.d	/^	XUnmapEvent xunmap;$/;"	m	union:XEvent	file:	access:public
XEvent::xvisibility	simpledisplay.d	/^	XVisibilityEvent xvisibility;$/;"	m	union:XEvent	file:	access:public
XExposeEvent	simpledisplay.d	/^struct XExposeEvent$/;"	s	file:
XExposeEvent::count	simpledisplay.d	/^	int count;		\/* if non-zero, at least this many more *\/$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XExposeEvent	file:	access:public
XExposeEvent::y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XExposeEvent	file:	access:public
XExtData	simpledisplay.d	/^	alias void* XExtData;$/;"	t	file:
XFillArc	simpledisplay.d	/^	int XFillArc(Display*, Drawable, GC, int, int, uint, uint, int, int);$/;"	p	file:	signature:(Display*, Drawable, GC, int, int, uint, uint, int, int)
XFillPolygon	simpledisplay.d	/^	int XFillPolygon(Display*, Drawable, GC, XPoint*, int, PolygonShape, CoordMode);$/;"	p	file:	signature:(Display*, Drawable, GC, XPoint*, int, PolygonShape, CoordMode)
XFillRectangle	simpledisplay.d	/^	int XFillRectangle(Display*, Drawable, GC, int, int, uint, uint);$/;"	p	file:	signature:(Display*, Drawable, GC, int, int, uint, uint)
XFlush	simpledisplay.d	/^	int XFlush(Display*);$/;"	p	file:	signature:(Display*)
XFocusChangeEvent	simpledisplay.d	/^struct XFocusChangeEvent{$/;"	s	file:
XFocusChangeEvent::detail	simpledisplay.d	/^	NotifyDetail detail;$/;"	m	struct:XFocusChangeEvent	file:	access:public
XFocusChangeEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
XFocusChangeEvent::mode	simpledisplay.d	/^	NotifyModes mode;		\/* NotifyNormal, NotifyWhileGrabbed,$/;"	m	struct:XFocusChangeEvent	file:	access:public
XFocusChangeEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
XFocusChangeEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
XFocusChangeEvent::type	simpledisplay.d	/^	int type;		\/* FocusIn or FocusOut *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
XFocusChangeEvent::window	simpledisplay.d	/^	Window window;		\/* window of event *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
XFocusInEvent	simpledisplay.d	/^alias XFocusChangeEvent XFocusInEvent;$/;"	t	file:
XFocusOutEvent	simpledisplay.d	/^alias XFocusChangeEvent XFocusOutEvent;$/;"	t	file:
XFreeGC	simpledisplay.d	/^	int XFreeGC(Display*, GC);$/;"	p	file:	signature:(Display*, GC)
XFreePixmap	simpledisplay.d	/^	int XFreePixmap(Display*, Pixmap);$/;"	p	file:	signature:(Display*, Pixmap)
XGraphicsExposeEvent	simpledisplay.d	/^struct XGraphicsExposeEvent{$/;"	s	file:
XGraphicsExposeEvent::count	simpledisplay.d	/^	int count;		\/* if non-zero, at least this many more *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::drawable	simpledisplay.d	/^	Drawable drawable;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::major_code	simpledisplay.d	/^	int major_code;		\/* core is CopyArea or CopyPlane *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::minor_code	simpledisplay.d	/^	int minor_code;		\/* not defined in the core *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGraphicsExposeEvent::y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
XGravityEvent	simpledisplay.d	/^struct XGravityEvent$/;"	s	file:
XGravityEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XGravityEvent	file:	access:public
XGravityEvent::event	simpledisplay.d	/^	Window event;$/;"	m	struct:XGravityEvent	file:	access:public
XGravityEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XGravityEvent	file:	access:public
XGravityEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XGravityEvent	file:	access:public
XGravityEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XGravityEvent	file:	access:public
XGravityEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XGravityEvent	file:	access:public
XGravityEvent::x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGravityEvent	file:	access:public
XGravityEvent::y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGravityEvent	file:	access:public
XID	simpledisplay.d	/^	alias uint XID;$/;"	t	file:
XImage	simpledisplay.d	/^	struct XImage {$/;"	s	file:
XImage::bitmap_bit_order	simpledisplay.d	/^	    int bitmap_bit_order;		\/* LSBFirst, MSBFirst *\/$/;"	m	struct:XImage	file:	access:public
XImage::bitmap_pad	simpledisplay.d	/^	    int bitmap_pad;			\/* 8, 16, 32 either XY or ZPixmap *\/$/;"	m	struct:XImage	file:	access:public
XImage::bitmap_unit	simpledisplay.d	/^	    int bitmap_unit;			\/* quant. of scanline 8, 16, 32 *\/$/;"	m	struct:XImage	file:	access:public
XImage::bits_per_pixel	simpledisplay.d	/^	    int bits_per_pixel;			\/* bits per pixel (ZPixmap) *\/$/;"	m	struct:XImage	file:	access:public
XImage::blue_mask	simpledisplay.d	/^	    uint blue_mask;$/;"	m	struct:XImage	file:	access:public
XImage::byte_order	simpledisplay.d	/^	    ByteOrder byte_order;		\/* data byte order, LSBFirst, MSBFirst *\/$/;"	m	struct:XImage	file:	access:public
XImage::bytes_per_line	simpledisplay.d	/^	    int bytes_per_line;			\/* accelarator to next line *\/$/;"	m	struct:XImage	file:	access:public
XImage::data	simpledisplay.d	/^	    void *data;					\/* pointer to image data *\/$/;"	m	struct:XImage	file:	access:public
XImage::depth	simpledisplay.d	/^	    int depth;					\/* depth of image *\/$/;"	m	struct:XImage	file:	access:public
XImage::f	simpledisplay.d	/^	    struct f {				\/* image manipulation routines *\/$/;"	s	struct:XImage	file:	access:public
XImage::f::add_pixel	simpledisplay.d	/^			int function(XImage *, int)add_pixel;$/;"	m	struct:XImage::f	file:	access:public
XImage::f::create_image	simpledisplay.d	/^				int					\/* bytes_per_line *\/) create_image;$/;"	m	struct:XImage::f	file:	access:public
XImage::f::destroy_image	simpledisplay.d	/^			int  function(XImage *)destroy_image;$/;"	m	struct:XImage::f	file:	access:public
XImage::f::get_pixel	simpledisplay.d	/^			uint function(XImage *, int, int)get_pixel;$/;"	m	struct:XImage::f	file:	access:public
XImage::f::put_pixel	simpledisplay.d	/^			int  function(XImage *, int, int, uint)put_pixel;$/;"	m	struct:XImage::f	file:	access:public
XImage::f::sub_image	simpledisplay.d	/^			XImage function(XImage *, int, int, uint, uint)sub_image;$/;"	m	struct:XImage::f	file:	access:public
XImage::format	simpledisplay.d	/^	    ImageFormat format;		\/* XYBitmap, XYPixmap, ZPixmap *\/$/;"	m	struct:XImage	file:	access:public
XImage::green_mask	simpledisplay.d	/^	    uint green_mask;$/;"	m	struct:XImage	file:	access:public
XImage::height	simpledisplay.d	/^	    int width, height;			\/* size of image *\/$/;"	m	struct:XImage	file:	access:public
XImage::obdata	simpledisplay.d	/^	    XPointer obdata;			\/* hook for the object routines to hang on *\/$/;"	m	struct:XImage	file:	access:public
XImage::red_mask	simpledisplay.d	/^	    uint red_mask;	\/* bits in z arrangment *\/$/;"	m	struct:XImage	file:	access:public
XImage::width	simpledisplay.d	/^	    int width, height;			\/* size of image *\/$/;"	m	struct:XImage	file:	access:public
XImage::xoffset	simpledisplay.d	/^	    int xoffset;				\/* number of pixels offset in X direction *\/$/;"	m	struct:XImage	file:	access:public
XInternAtom	simpledisplay.d	/^Atom XInternAtom($/;"	p	file:	signature:( Display* , const char* , Bool )
XKeyEvent	simpledisplay.d	/^struct XKeyEvent$/;"	s	file:
XKeyEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::keycode	simpledisplay.d	/^	uint keycode;	\/* detail *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::type	simpledisplay.d	/^	int type;			\/* of event *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::window	simpledisplay.d	/^	Window window;	        \/* "event" window it is reported relative to *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyEvent::y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XKeyEvent	file:	access:public
XKeyPressedEvent	simpledisplay.d	/^alias XKeyEvent XKeyPressedEvent;$/;"	t	file:
XKeyReleasedEvent	simpledisplay.d	/^alias XKeyEvent XKeyReleasedEvent;$/;"	t	file:
XKeycodeToKeysym	simpledisplay.d	/^KeySym XKeycodeToKeysym($/;"	p	file:	signature:( Display* , KeyCode , int )
XKeymapEvent	simpledisplay.d	/^struct XKeymapEvent$/;"	s	file:
XKeymapEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XKeymapEvent	file:	access:public
XKeymapEvent::key_vector	simpledisplay.d	/^	byte key_vector[32];$/;"	m	struct:XKeymapEvent	file:	access:public
XKeymapEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XKeymapEvent	file:	access:public
XKeymapEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XKeymapEvent	file:	access:public
XKeymapEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XKeymapEvent	file:	access:public
XKeymapEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XKeymapEvent	file:	access:public
XLeaveWindowEvent	simpledisplay.d	/^alias XCrossingEvent XLeaveWindowEvent;$/;"	t	file:
XMapEvent	simpledisplay.d	/^struct XMapEvent$/;"	s	file:
XMapEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMapEvent	file:	access:public
XMapEvent::event	simpledisplay.d	/^	Window event;$/;"	m	struct:XMapEvent	file:	access:public
XMapEvent::override_redirect	simpledisplay.d	/^	Bool override_redirect;	\/* Boolean, is override set... *\/$/;"	m	struct:XMapEvent	file:	access:public
XMapEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMapEvent	file:	access:public
XMapEvent::serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XMapEvent	file:	access:public
XMapEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XMapEvent	file:	access:public
XMapEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XMapEvent	file:	access:public
XMapRequestEvent	simpledisplay.d	/^struct XMapRequestEvent$/;"	s	file:
XMapRequestEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMapRequestEvent	file:	access:public
XMapRequestEvent::parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XMapRequestEvent	file:	access:public
XMapRequestEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMapRequestEvent	file:	access:public
XMapRequestEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XMapRequestEvent	file:	access:public
XMapRequestEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XMapRequestEvent	file:	access:public
XMapRequestEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XMapRequestEvent	file:	access:public
XMapWindow	simpledisplay.d	/^int XMapWindow($/;"	p	file:	signature:( Display* , Window )
XMappingEvent	simpledisplay.d	/^struct XMappingEvent$/;"	s	file:
XMappingEvent::count	simpledisplay.d	/^	int count;		\/* defines range of change w. first_keycode*\/$/;"	m	struct:XMappingEvent	file:	access:public
XMappingEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMappingEvent	file:	access:public
XMappingEvent::first_keycode	simpledisplay.d	/^	int first_keycode;	\/* first keycode *\/$/;"	m	struct:XMappingEvent	file:	access:public
XMappingEvent::request	simpledisplay.d	/^	MappingType request;		\/* one of MappingModifier, MappingKeyboard,$/;"	m	struct:XMappingEvent	file:	access:public
XMappingEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMappingEvent	file:	access:public
XMappingEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XMappingEvent	file:	access:public
XMappingEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XMappingEvent	file:	access:public
XMappingEvent::window	simpledisplay.d	/^	Window window;		\/* unused *\/$/;"	m	struct:XMappingEvent	file:	access:public
XMotionEvent	simpledisplay.d	/^struct XMotionEvent{$/;"	s	file:
XMotionEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::is_hint	simpledisplay.d	/^	byte is_hint;		\/* detail *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::type	simpledisplay.d	/^	int type;		\/* of event *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::window	simpledisplay.d	/^	Window window;	        \/* "event" window reported relative to *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XMotionEvent	file:	access:public
XMotionEvent::y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XMotionEvent	file:	access:public
XNextEvent	simpledisplay.d	/^int XNextEvent($/;"	p	file:	signature:( Display* , XEvent* )
XNoExposeEvent	simpledisplay.d	/^struct XNoExposeEvent{$/;"	s	file:
XNoExposeEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
XNoExposeEvent::drawable	simpledisplay.d	/^	Drawable drawable;$/;"	m	struct:XNoExposeEvent	file:	access:public
XNoExposeEvent::major_code	simpledisplay.d	/^	int major_code;		\/* core is CopyArea or CopyPlane *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
XNoExposeEvent::minor_code	simpledisplay.d	/^	int minor_code;		\/* not defined in the core *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
XNoExposeEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
XNoExposeEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
XNoExposeEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XNoExposeEvent	file:	access:public
XOpenDisplay	simpledisplay.d	/^Display* XOpenDisplay(const char*);$/;"	p	file:	signature:(const char*)
XPending	simpledisplay.d	/^	int XPending(Display*);$/;"	p	file:	signature:(Display*)
XPoint	simpledisplay.d	/^	struct XPoint {$/;"	s	file:
XPoint::x	simpledisplay.d	/^		short x;$/;"	m	struct:XPoint	file:	access:public
XPoint::y	simpledisplay.d	/^		short y;$/;"	m	struct:XPoint	file:	access:public
XPointer	simpledisplay.d	/^	alias void* XPointer;$/;"	t	file:
XPointerMovedEvent	simpledisplay.d	/^alias XMotionEvent XPointerMovedEvent;$/;"	t	file:
XPropertyEvent	simpledisplay.d	/^struct XPropertyEvent$/;"	s	file:
XPropertyEvent::atom	simpledisplay.d	/^	Atom atom;$/;"	m	struct:XPropertyEvent	file:	access:public
XPropertyEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XPropertyEvent	file:	access:public
XPropertyEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XPropertyEvent	file:	access:public
XPropertyEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XPropertyEvent	file:	access:public
XPropertyEvent::state	simpledisplay.d	/^	PropertyNotification state;		\/* NewValue, Deleted *\/$/;"	m	struct:XPropertyEvent	file:	access:public
XPropertyEvent::time	simpledisplay.d	/^	Time time;$/;"	m	struct:XPropertyEvent	file:	access:public
XPropertyEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XPropertyEvent	file:	access:public
XPropertyEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XPropertyEvent	file:	access:public
XPutImage	simpledisplay.d	/^int XPutImage($/;"	p	file:	signature:( Display* , Drawable , GC , XImage* , int , int , int , int , uint , uint )
XReparentEvent	simpledisplay.d	/^struct XReparentEvent$/;"	s	file:
XReparentEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::event	simpledisplay.d	/^	Window event;$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::override_redirect	simpledisplay.d	/^	Bool override_redirect;$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XReparentEvent	file:	access:public
XReparentEvent::y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XReparentEvent	file:	access:public
XResizeRequestEvent	simpledisplay.d	/^struct XResizeRequestEvent$/;"	s	file:
XResizeRequestEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XResizeRequestEvent	file:	access:public
XResizeRequestEvent::height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XResizeRequestEvent	file:	access:public
XResizeRequestEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XResizeRequestEvent	file:	access:public
XResizeRequestEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XResizeRequestEvent	file:	access:public
XResizeRequestEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XResizeRequestEvent	file:	access:public
XResizeRequestEvent::width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XResizeRequestEvent	file:	access:public
XResizeRequestEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XResizeRequestEvent	file:	access:public
XSelectInput	simpledisplay.d	/^int XSelectInput($/;"	p	file:	signature:( Display* , Window , EventMask )
XSelectionClearEvent	simpledisplay.d	/^struct XSelectionClearEvent$/;"	s	file:
XSelectionClearEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XSelectionClearEvent	file:	access:public
XSelectionClearEvent::selection	simpledisplay.d	/^	Atom selection;$/;"	m	struct:XSelectionClearEvent	file:	access:public
XSelectionClearEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XSelectionClearEvent	file:	access:public
XSelectionClearEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XSelectionClearEvent	file:	access:public
XSelectionClearEvent::time	simpledisplay.d	/^	Time time;$/;"	m	struct:XSelectionClearEvent	file:	access:public
XSelectionClearEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XSelectionClearEvent	file:	access:public
XSelectionClearEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XSelectionClearEvent	file:	access:public
XSelectionEvent	simpledisplay.d	/^struct XSelectionEvent$/;"	s	file:
XSelectionEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::property	simpledisplay.d	/^	Atom property;		\/* ATOM or None *\/$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::requestor	simpledisplay.d	/^	Window requestor;$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::selection	simpledisplay.d	/^	Atom selection;$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::target	simpledisplay.d	/^	Atom target;$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::time	simpledisplay.d	/^	Time time;$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XSelectionEvent	file:	access:public
XSelectionRequestEvent	simpledisplay.d	/^struct XSelectionRequestEvent$/;"	s	file:
XSelectionRequestEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::owner	simpledisplay.d	/^	Window owner;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::property	simpledisplay.d	/^	Atom property;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::requestor	simpledisplay.d	/^	Window requestor;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::selection	simpledisplay.d	/^	Atom selection;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::target	simpledisplay.d	/^	Atom target;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::time	simpledisplay.d	/^	Time time;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSelectionRequestEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
XSetBackground	simpledisplay.d	/^	int XSetBackground(Display*, GC, uint);$/;"	p	file:	signature:(Display*, GC, uint)
XSetForeground	simpledisplay.d	/^	int XSetForeground(Display*, GC, uint);$/;"	p	file:	signature:(Display*, GC, uint)
XSetWMName	simpledisplay.d	/^	void XSetWMName(Display*, Window, XTextProperty*);$/;"	p	file:	signature:(Display*, Window, XTextProperty*)
XSetWMProtocols	simpledisplay.d	/^Status XSetWMProtocols($/;"	p	file:	signature:( Display* , Window , Atom* , int )
XTextProperty	simpledisplay.d	/^	struct XTextProperty {$/;"	s	file:
XTextProperty::encoding	simpledisplay.d	/^		Atom encoding;			\/* prop type *\/$/;"	m	struct:XTextProperty	file:	access:public
XTextProperty::format	simpledisplay.d	/^		int format;				\/* prop data format: 8, 16, or 32 *\/$/;"	m	struct:XTextProperty	file:	access:public
XTextProperty::nitems	simpledisplay.d	/^		uint nitems;		\/* number of data items in value *\/$/;"	m	struct:XTextProperty	file:	access:public
XTextProperty::value	simpledisplay.d	/^		const(char)* value;		\/* same as Property routines *\/$/;"	m	struct:XTextProperty	file:	access:public
XUnmapEvent	simpledisplay.d	/^struct XUnmapEvent$/;"	s	file:
XUnmapEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XUnmapEvent	file:	access:public
XUnmapEvent::event	simpledisplay.d	/^	Window event;$/;"	m	struct:XUnmapEvent	file:	access:public
XUnmapEvent::from_configure	simpledisplay.d	/^	Bool from_configure;$/;"	m	struct:XUnmapEvent	file:	access:public
XUnmapEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XUnmapEvent	file:	access:public
XUnmapEvent::serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XUnmapEvent	file:	access:public
XUnmapEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XUnmapEvent	file:	access:public
XUnmapEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XUnmapEvent	file:	access:public
XVisibilityEvent	simpledisplay.d	/^struct XVisibilityEvent{$/;"	s	file:
XVisibilityEvent::display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
XVisibilityEvent::send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
XVisibilityEvent::serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
XVisibilityEvent::state	simpledisplay.d	/^	VisibilityNotify state;		\/* Visibility state *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
XVisibilityEvent::type	simpledisplay.d	/^	int type;$/;"	m	struct:XVisibilityEvent	file:	access:public
XVisibilityEvent::window	simpledisplay.d	/^	Window window;$/;"	m	struct:XVisibilityEvent	file:	access:public
YCrCBtoRGB	imaged/jpeg.d	/^    void YCrCBtoRGB()$/;"	f	class:JpegDecoder	access:public	signature:()
\cD	session.vim	/^nmap <silent> \\cD <Plug>VCSDelete$/;"	m
\cG	session.vim	/^nmap <silent> \\cG <Plug>VCSClearAndGotoOriginal$/;"	m
\cL	session.vim	/^nmap <silent> \\cL <Plug>VCSLock$/;"	m
\cN	session.vim	/^nmap <silent> \\cN <Plug>VCSSplitAnnotate$/;"	m
\cU	session.vim	/^nmap <silent> \\cU <Plug>VCSUnlock$/;"	m
\ca	session.vim	/^nmap <silent> \\ca <Plug>VCSAdd$/;"	m
\cc	session.vim	/^nmap <silent> \\cc <Plug>VCSCommit$/;"	m
\cd	session.vim	/^nmap <silent> \\cd <Plug>VCSDiff$/;"	m
\cg	session.vim	/^nmap <silent> \\cg <Plug>VCSGotoOriginal$/;"	m
\ci	session.vim	/^nmap <silent> \\ci <Plug>VCSInfo$/;"	m
\cl	session.vim	/^nmap <silent> \\cl <Plug>VCSLog$/;"	m
\cn	session.vim	/^nmap <silent> \\cn <Plug>VCSAnnotate$/;"	m
\cq	session.vim	/^nmap <silent> \\cq <Plug>VCSRevert$/;"	m
\cr	session.vim	/^nmap <silent> \\cr <Plug>VCSReview$/;"	m
\cs	session.vim	/^nmap <silent> \\cs <Plug>VCSStatus$/;"	m
\cu	session.vim	/^nmap <silent> \\cu <Plug>VCSUpdate$/;"	m
\cv	session.vim	/^nmap <silent> \\cv <Plug>VCSVimDiff$/;"	m
_XPrivDisplay	simpledisplay.d	/^	alias Display* _XPrivDisplay;$/;"	t	file:
_XPrivate	simpledisplay.d	/^	struct _XPrivate {}$/;"	s	file:
_XrmHashBucketRec	simpledisplay.d	/^	struct _XrmHashBucketRec {}$/;"	s	file:
_fillColor	simpledisplay.d	/^		Color _fillColor;$/;"	m	file:
_foreground	simpledisplay.d	/^		Color _foreground;$/;"	m	file:
_outlineColor	simpledisplay.d	/^		Color _outlineColor;$/;"	m	file:
a	arsd/color.d	/^	ubyte a;$/;"	m	struct:Color	file:	access:public
a	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
above	simpledisplay.d	/^	Window above;$/;"	m	struct:XConfigureEvent	file:	access:public
above	simpledisplay.d	/^	Window above;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
act	imaged/jpeg.d	/^        ubyte[3] dct, act, nCmpBlocks; \/\/ dct, act store the DC and AC table indexes for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
activeScreenPainter	simpledisplay.d	/^	private ScreenPainterImplementation* activeScreenPainter;$/;"	m	class:SimpleWindow	file:	access:private
add_pixel	simpledisplay.d	/^			int function(XImage *, int)add_pixel;$/;"	m	struct:XImage::f	file:	access:public
allocateImage	imaged/png.d	/^    void allocateImage()$/;"	f	class:PngDecoder	access:public	signature:()
appendChunk	imaged/png.d	/^    void appendChunk(in PNGChunk chunk, ref ubyte[] data)$/;"	f	class:PngEncoder	access:public	signature:(in PNGChunk chunk, ref ubyte[] data)
arsd.color	arsd/color.d	/^module arsd.color;$/;"	M
atom	simpledisplay.d	/^	Atom atom;$/;"	m	struct:XPropertyEvent	file:	access:public
b	arsd/color.d	/^	ubyte b;$/;"	m	struct:Color	file:	access:public
b	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
b	simpledisplay.d	/^		byte b[20];$/;"	m	union:XClientMessageEvent::data	file:	access:public
backgroundIsNotTransparent	simpledisplay.d	/^		bool backgroundIsNotTransparent = true;$/;"	m	file:
backingImage	simpledisplay.d	/^	Image backingImage;$/;"	m	class:SimpleWindow	file:	access:public
backing_store	simpledisplay.d	/^	int backing_store;		\/* Never, WhenMapped, Always *\/$/;"	m	struct:Screen	file:	access:public
bigEndian	imaged/png.d	/^        uint bigEndian(uint value)$/;"	f	signature:(uint value)
bigEndianBytes	imaged/png.d	/^    ubyte[] bigEndianBytes(uint value)$/;"	f	class:PngEncoder	access:public	signature:(uint value)
bilinearResample	imaged/jpeg.d	/^    void bilinearResample(uint cmpIndex)$/;"	f	class:JpegDecoder	access:public	signature:(uint cmpIndex)
bitCode	imaged/jpeg.d	/^        short bitCode;  \/\/ Actual bit code$/;"	m	struct:JpegDecoder::hashKey	file:	access:public
bitDepth	imaged/image.d	/^    @property const(uint) bitDepth() const { return m_bitDepth; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
bitDepth	imaged/image.d	/^    @property const(uint) bitDepth() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
bitmap_bit_order	simpledisplay.d	/^		ByteOrder bitmap_bit_order;	\/* LeastSignificant or MostSignificant *\/$/;"	m	struct:Display	file:	access:public
bitmap_bit_order	simpledisplay.d	/^	    int bitmap_bit_order;		\/* LSBFirst, MSBFirst *\/$/;"	m	struct:XImage	file:	access:public
bitmap_pad	simpledisplay.d	/^		int bitmap_pad;		\/* padding requirements on bitmaps *\/$/;"	m	struct:Display	file:	access:public
bitmap_pad	simpledisplay.d	/^	    int bitmap_pad;			\/* 8, 16, 32 either XY or ZPixmap *\/$/;"	m	struct:XImage	file:	access:public
bitmap_unit	simpledisplay.d	/^		int bitmap_unit;	\/* padding and data requirements *\/$/;"	m	struct:Display	file:	access:public
bitmap_unit	simpledisplay.d	/^	    int bitmap_unit;			\/* quant. of scanline 8, 16, 32 *\/$/;"	m	struct:XImage	file:	access:public
bits_per_pixel	simpledisplay.d	/^	    int bits_per_pixel;			\/* bits per pixel (ZPixmap) *\/$/;"	m	struct:XImage	file:	access:public
bits_per_rgb	simpledisplay.d	/^	int bits_per_rgb;	\/* log base 2 of distinct color values *\/$/;"	m	struct:Visual	file:	access:public
black	arsd/color.d	/^	static Color black() {$/;"	f	struct:Color	access:public	signature:()
black_pixel	simpledisplay.d	/^	uint black_pixel;		\/* White and Black pixel values *\/$/;"	m	struct:Screen	file:	access:public
blockNumber	imaged/jpeg.d	/^        uint dctCmpIndex = 0, blockNumber = 0; \/\/ DCT coefficient index and current block in MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
block_height	imaged/png.d	/^        int[7] block_height =   [ 8, 8, 4, 4, 2, 2, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
block_order	imaged/jpeg.d	/^    immutable static ubyte[] block_order =$/;"	m	class:JpegDecoder	file:	access:public
block_width	imaged/png.d	/^        int[7] block_width =    [ 8, 4, 4, 2, 2, 1, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
blue_mask	simpledisplay.d	/^	    uint blue_mask;$/;"	m	struct:XImage	file:	access:public
blue_mask	simpledisplay.d	/^	uint red_mask, green_mask, blue_mask;	\/* mask values *\/$/;"	m	struct:Visual	file:	access:public
border_width	simpledisplay.d	/^	int border_width;	\/* border width *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
border_width	simpledisplay.d	/^	int border_width;$/;"	m	struct:XConfigureEvent	file:	access:public
border_width	simpledisplay.d	/^	int border_width;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
buffer	imaged/jpeg.d	/^        ubyte[] buffer;$/;"	m	struct:JpegDecoder::JPGSegment	file:	access:public
buffer	imaged/jpeg.d	/^        uint buffer = 0, bufferLength = 0, needBits = 0;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
buffer	imaged/png.d	/^        ubyte[] buffer;$/;"	m	struct:PngDecoder::PNGSegment	file:	access:public
buffer	simpledisplay.d	/^		HBITMAP buffer;$/;"	m	template:NativeSimpleWindowImplementation	file:
buffer	simpledisplay.d	/^		Pixmap buffer;$/;"	m	template:NativeSimpleWindowImplementation	file:
bufferLength	imaged/jpeg.d	/^        uint buffer = 0, bufferLength = 0, needBits = 0;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
button	simpledisplay.d	/^	int button;$/;"	m	struct:MouseEvent	file:	access:public
button	simpledisplay.d	/^	uint button;	\/* detail *\/$/;"	m	struct:XButtonEvent	file:	access:public
buttonFlags	simpledisplay.d	/^	int buttonFlags;$/;"	m	struct:MouseEvent	file:	access:public
byte_order	simpledisplay.d	/^		ByteOrder byte_order;		\/* screen byte order, LSBFirst, MSBFirst *\/$/;"	m	struct:Display	file:	access:public
byte_order	simpledisplay.d	/^	    ByteOrder byte_order;		\/* data byte order, LSBFirst, MSBFirst *\/$/;"	m	struct:XImage	file:	access:public
bytes_per_line	simpledisplay.d	/^	    int bytes_per_line;			\/* accelarator to next line *\/$/;"	m	struct:XImage	file:	access:public
checkSum	imaged/png.d	/^    uint checkSum;$/;"	m	class:PngDecoder	file:	access:public
chunkLength	imaged/png.d	/^        int chunkLength;$/;"	m	struct:PngDecoder::PNGSegment	file:	access:public
chunkType	imaged/png.d	/^        Chunk chunkType = Chunk.NONE;$/;"	m	struct:PngDecoder::PNGSegment	file:	access:public
clamp	imaged/jpeg.d	/^ubyte clamp(const int x)$/;"	f	signature:(const int x)
class_	simpledisplay.d	/^	int class_;			\/* class of screen (monochrome, etc.) *\/$/;"	m	struct:Visual	file:	access:public
clear	simpledisplay.d	/^	void clear() {$/;"	f	struct:ScreenPainter	access:public	signature:()
close	simpledisplay.d	/^		static void close() {$/;"	f	class:XDisplayConnection	access:public	signature:()
close	simpledisplay.d	/^	void close() {$/;"	f	class:SimpleWindow	access:public	signature:()
closeWindow	simpledisplay.d	/^		void closeWindow() {$/;"	f	template:NativeSimpleWindowImplementation	signature:()
cmap	simpledisplay.d	/^	Colormap cmap;			\/* default color map *\/$/;"	m	struct:Screen	file:	access:public
cmpIdx	imaged/jpeg.d	/^        short cmpIdx = 0; \/\/ Current component index in scan$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
code	imaged/image.d	/^    int code;$/;"	m	struct:IMGError	file:	access:public
colIDCT	imaged/jpeg.d	/^    void colIDCT(int* block)$/;"	f	class:JpegDecoder	access:public	signature:(int* block)
col_increment	imaged/png.d	/^        int[7] col_increment =  [ 8, 8, 4, 4, 2, 2, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
color	simpledisplay.d	/^	Color color;$/;"	m	struct:Pen	file:	access:public
colorFromString	arsd/color.d	/^Color colorFromString(string s) {$/;"	f	signature:(string s)
colormap	simpledisplay.d	/^	Colormap colormap;	\/* COLORMAP or None *\/$/;"	m	struct:XColormapEvent	file:	access:public
comment	imaged/jpeg.d	/^    char[] comment;$/;"	m	class:JpegDecoder	file:	access:public
comparing	imaged/jpeg.d	/^        bool comparing = true;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
components	imaged/jpeg.d	/^    Component[] components;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::Component	file:	access:public
convertPaletteToRGB	imaged/png.d	/^    ubyte[] convertPaletteToRGB(ubyte[] data)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] data)
copy	imaged/image.d	/^    Image copy() const;$/;"	p	virtual:Image	file:	access:public	signature:() const
copy	imaged/image.d	/^    Img!F copy() const$/;"	f	class:Img	access:public	signature:() const
count	simpledisplay.d	/^	int count;		\/* defines range of change w. first_keycode*\/$/;"	m	struct:XMappingEvent	file:	access:public
count	simpledisplay.d	/^	int count;		\/* if non-zero, at least this many more *\/$/;"	m	struct:XExposeEvent	file:	access:public
count	simpledisplay.d	/^	int count;		\/* if non-zero, at least this many more *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
create	simpledisplay.d	/^		void create(NativeWindowHandle window) {$/;"	f	signature:(NativeWindowHandle window)
createHeaderChunk	imaged/png.d	/^    PNGChunk createHeaderChunk(in Image img)$/;"	f	class:PngEncoder	access:public	signature:(in Image img)
createImage	simpledisplay.d	/^		void createImage(int width, int height) {$/;"	f	template:NativeImageImplementation	signature:(int width, int height)
createWindow	simpledisplay.d	/^		void createWindow(int width, int height, string title) {$/;"	f	template:NativeSimpleWindowImplementation	signature:(int width, int height, string title)
create_image	simpledisplay.d	/^				int					\/* bytes_per_line *\/) create_image;$/;"	m	struct:XImage::f	file:	access:public
currentBrush	simpledisplay.d	/^		HBRUSH currentBrush;$/;"	m	file:
currentMarker	imaged/jpeg.d	/^    Marker currentMarker = Marker.None;$/;"	m	class:JpegDecoder	file:	access:public
currentPen	simpledisplay.d	/^		HPEN currentPen;$/;"	m	file:
d	simpledisplay.d	/^		Drawable d;$/;"	m	file:
darken	arsd/color.d	/^Color darken(Color c, real percentage) {$/;"	f	signature:(Color c, real percentage)
data	imaged/jpeg.d	/^        ubyte[] data; \/\/ a single MCU of data for this component$/;"	m	struct:JpegDecoder::Component	file:	access:public
data	imaged/png.d	/^        ubyte[] data;$/;"	m	struct:PngEncoder::PNGChunk	file:	access:public
data	simpledisplay.d	/^	    void *data;					\/* pointer to image data *\/$/;"	m	struct:XImage	file:	access:public
data	simpledisplay.d	/^	union data{$/;"	u	struct:XClientMessageEvent	file:	access:public
db	simpledisplay.d	/^		_XrmHashBucketRec *db;$/;"	m	struct:Display	file:	access:public
dcTerm	imaged/jpeg.d	/^        int[3] dcTerm;  \/\/ DC coefficients for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
dct	imaged/jpeg.d	/^        ubyte[3] dct, act, nCmpBlocks; \/\/ dct, act store the DC and AC table indexes for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
dctCmpIndex	imaged/jpeg.d	/^        uint dctCmpIndex = 0, blockNumber = 0; \/\/ DCT coefficient index and current block in MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
dctComponents	imaged/jpeg.d	/^        int[64] dctComponents; \/\/ DCT coefficients for current component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
default_gc	simpledisplay.d	/^	GC default_gc;			\/* GC for the root root visual *\/$/;"	m	struct:Screen	file:	access:public
default_screen	simpledisplay.d	/^		int default_screen;	\/* default screen for operations *\/$/;"	m	struct:Display	file:	access:public
depth	simpledisplay.d	/^	    int depth;					\/* depth of image *\/$/;"	m	struct:XImage	file:	access:public
depth	simpledisplay.d	/^	int depth;		\/* this depth (Z) of the depth *\/$/;"	m	struct:Depth	file:	access:public
depths	simpledisplay.d	/^	Depth *depths;			\/* list of allowable depths on the screen *\/$/;"	m	struct:Screen	file:	access:public
desaturate	arsd/color.d	/^Color desaturate(Color c, real percentage) {$/;"	f	signature:(Color c, real percentage)
destiny	simpledisplay.d	/^		Drawable destiny;$/;"	m	file:
destroy_image	simpledisplay.d	/^			int  function(XImage *)destroy_image;$/;"	m	struct:XImage::f	file:	access:public
destroyed	simpledisplay.d	/^		bool destroyed = false;$/;"	m	template:NativeSimpleWindowImplementation	file:
detail	simpledisplay.d	/^	NotifyDetail detail;$/;"	m	struct:XCrossingEvent	file:	access:public
detail	simpledisplay.d	/^	NotifyDetail detail;$/;"	m	struct:XFocusChangeEvent	file:	access:public
detail	simpledisplay.d	/^	WindowStackingMethod detail;		\/* Above, Below, TopIf, BottomIf, Opposite *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
display	simpledisplay.d	/^		Display* display;$/;"	m	file:
display	simpledisplay.d	/^		Display* display;$/;"	m	template:NativeSimpleWindowImplementation	file:
display	simpledisplay.d	/^		private static Display* display;$/;"	m	class:XDisplayConnection	file:	access:public
display	simpledisplay.d	/^	Display *display;		\/* back pointer to display structure *\/$/;"	m	struct:Screen	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XButtonEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCirculateEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XClientMessageEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XColormapEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XConfigureEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XCrossingEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XDestroyWindowEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XErrorEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XExposeEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XGravityEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XKeyEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XKeymapEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMapEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMapRequestEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMappingEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XMotionEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XPropertyEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XReparentEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XResizeRequestEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XSelectionClearEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XSelectionEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XSelectionRequestEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XUnmapEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;	\/* Display the event was read from *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
display	simpledisplay.d	/^	Display *display;\/* Display the event was read from *\/$/;"	m	struct:XAnyEvent	file:	access:public
displayImage	simpledisplay.d	/^void displayImage(Image image, SimpleWindow win = null) {$/;"	f	signature:(Image image, SimpleWindow win = null)
display_name	simpledisplay.d	/^		char *display_name;	\/* "host:display" string used on this connect*\/$/;"	m	struct:Display	file:	access:public
dispose	simpledisplay.d	/^		void dispose() {$/;"	f	signature:()
dispose	simpledisplay.d	/^		void dispose() {$/;"	f	template:NativeImageImplementation	signature:()
dispose	simpledisplay.d	/^		void dispose() {$/;"	f	template:NativeSimpleWindowImplementation	signature:()
draw	simpledisplay.d	/^	ScreenPainter draw() {$/;"	f	class:SimpleWindow	access:public	signature:()
drawArc	simpledisplay.d	/^		void drawArc(int x1, int y1, int width, int height, int start, int finish) {$/;"	f	signature:(int x1, int y1, int width, int height, int start, int finish)
drawArc	simpledisplay.d	/^	void drawArc(Point upperLeft, int width, int height, int start, int finish) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, int width, int height, int start, int finish)
drawEllipse	simpledisplay.d	/^		void drawEllipse(int x1, int y1, int x2, int y2) {$/;"	f	signature:(int x1, int y1, int x2, int y2)
drawEllipse	simpledisplay.d	/^	void drawEllipse(Point upperLeft, Point lowerRight) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, Point lowerRight)
drawImage	simpledisplay.d	/^		void drawImage(int x, int y, Image i) {$/;"	f	signature:(int x, int y, Image i)
drawImage	simpledisplay.d	/^	void drawImage(Point upperLeft, Image i) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, Image i)
drawLine	simpledisplay.d	/^		void drawLine(int x1, int y1, int x2, int y2) {$/;"	f	signature:(int x1, int y1, int x2, int y2)
drawLine	simpledisplay.d	/^	void drawLine(Point starting, Point ending) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point starting, Point ending)
drawPixel	simpledisplay.d	/^		void drawPixel(int x, int y) {$/;"	f	signature:(int x, int y)
drawPixel	simpledisplay.d	/^	void drawPixel(Point where) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point where)
drawPolygon	simpledisplay.d	/^		void drawPolygon(Point[] vertexes) {$/;"	f	signature:(Point[] vertexes)
drawPolygon	simpledisplay.d	/^	void drawPolygon(Point[] vertexes) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point[] vertexes)
drawRectangle	simpledisplay.d	/^		void drawRectangle(int x, int y, int width, int height) {$/;"	f	signature:(int x, int y, int width, int height)
drawRectangle	simpledisplay.d	/^	void drawRectangle(Point upperLeft, int width, int height) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, int width, int height)
drawText	simpledisplay.d	/^		void drawText(int x, int y, int x2, int y2, string text) {$/;"	f	signature:(int x, int y, int x2, int y2, string text)
drawText	simpledisplay.d	/^	void drawText(Point upperLeft, string text) {$/;"	f	struct:ScreenPainter	access:public	signature:(Point upperLeft, string text)
drawable	simpledisplay.d	/^	Drawable drawable;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
drawable	simpledisplay.d	/^	Drawable drawable;$/;"	m	struct:XNoExposeEvent	file:	access:public
encoding	simpledisplay.d	/^		Atom encoding;			\/* prop type *\/$/;"	m	struct:XTextProperty	file:	access:public
endOfBlock	imaged/jpeg.d	/^    void endOfBlock()$/;"	f	class:JpegDecoder	access:public	signature:()
endOfImage	imaged/jpeg.d	/^    void endOfImage()$/;"	f	class:JpegDecoder	access:public	signature:()
endOfMCU	imaged/jpeg.d	/^    void endOfMCU()$/;"	f	class:JpegDecoder	access:public	signature:()
errorState	imaged/image.d	/^    @property IMGError errorState() const { return m_errorState; } \/\/ ditto$/;"	f	class:Decoder	access:public	signature:() const
error_code	simpledisplay.d	/^	uint error_code;	\/* error code of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
event	simpledisplay.d	/^	Window event;$/;"	m	struct:XCirculateEvent	file:	access:public
event	simpledisplay.d	/^	Window event;$/;"	m	struct:XConfigureEvent	file:	access:public
event	simpledisplay.d	/^	Window event;$/;"	m	struct:XDestroyWindowEvent	file:	access:public
event	simpledisplay.d	/^	Window event;$/;"	m	struct:XGravityEvent	file:	access:public
event	simpledisplay.d	/^	Window event;$/;"	m	struct:XMapEvent	file:	access:public
event	simpledisplay.d	/^	Window event;$/;"	m	struct:XReparentEvent	file:	access:public
event	simpledisplay.d	/^	Window event;$/;"	m	struct:XUnmapEvent	file:	access:public
eventLoop	simpledisplay.d	/^		int eventLoop(long pulseTimeout) {$/;"	f	template:NativeSimpleWindowImplementation	signature:(long pulseTimeout)
eventLoop	simpledisplay.d	/^	final int eventLoop(T...)($/;"	f	class:SimpleWindow	access:public	signature:(T....)
example	example.d	/^module example;$/;"	M
ext_data	simpledisplay.d	/^		XExtData *ext_data;	\/* hook for extension to hang data *\/$/;"	m	struct:Display	file:	access:public
ext_data	simpledisplay.d	/^	XExtData *ext_data;		\/* hook for extension to hang data *\/$/;"	m	struct:Screen	file:	access:public
ext_data	simpledisplay.d	/^	XExtData *ext_data;	\/* hook for extension to hang data *\/$/;"	m	struct:Visual	file:	access:public
extremify	arsd/color.d	/^Color extremify(Color c, real percentage) {$/;"	f	signature:(Color c, real percentage)
f	simpledisplay.d	/^	    struct f {				\/* image manipulation routines *\/$/;"	s	struct:XImage	file:	access:public
fd	simpledisplay.d	/^		int fd;			\/* Network socket. *\/$/;"	m	struct:Display	file:	access:public
fetchDCTComponent	imaged/jpeg.d	/^    int fetchDCTComponent(int buffer, int bufferLength, int needBits)$/;"	f	class:JpegDecoder	access:public	signature:(int buffer, int bufferLength, int needBits)
fetchHuffmanCode	imaged/jpeg.d	/^    ubyte* fetchHuffmanCode(int buffer, int bufferLength, int needBits, int componentIndex)$/;"	f	class:JpegDecoder	access:public	signature:(int buffer, int bufferLength, int needBits, int componentIndex)
fillColor	simpledisplay.d	/^		@property void fillColor(Color c) {$/;"	f	signature:(Color c)
fillColor	simpledisplay.d	/^	@property void fillColor(Color c) {$/;"	f	struct:ScreenPainter	access:public	signature:(Color c)
filter	imaged/png.d	/^    static ubyte[] filter(in Image img, in ubyte[] scanLine1, ubyte[] scanLine2, out ubyte filterType)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, ubyte[] scanLine2, out ubyte filterType)
filter	imaged/png.d	/^    void filter()$/;"	f	class:PngDecoder	access:public	signature:()
filter0	imaged/png.d	/^    static ubyte[] filter0(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
filter1	imaged/png.d	/^    static ubyte[] filter1(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
filter1	imaged/png.d	/^    void filter1()$/;"	f	class:PngDecoder	access:public	signature:()
filter2	imaged/png.d	/^    static ubyte[] filter2(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
filter2	imaged/png.d	/^    void filter2()$/;"	f	class:PngDecoder	access:public	signature:()
filter3	imaged/png.d	/^    static ubyte[] filter3(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
filter3	imaged/png.d	/^    void filter3()$/;"	f	class:PngDecoder	access:public	signature:()
filter4	imaged/png.d	/^    static ubyte[] filter4(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, in ubyte[] scanLine1, in ubyte[] scanLine2, out uint absSum)
filter4	imaged/png.d	/^    void filter4()$/;"	f	class:PngDecoder	access:public	signature:()
first_keycode	simpledisplay.d	/^	int first_keycode;	\/* first keycode *\/$/;"	m	struct:XMappingEvent	file:	access:public
focus	simpledisplay.d	/^	Bool focus;		\/* Boolean focus *\/$/;"	m	struct:XCrossingEvent	file:	access:public
foregroundIsNotTransparent	simpledisplay.d	/^		bool foregroundIsNotTransparent = true;$/;"	m	file:
format	imaged/jpeg.d	/^    string format = "unknown"; \/\/ File format (will only do JFIF)$/;"	m	class:JpegDecoder	file:	access:public
format	simpledisplay.d	/^		int format;				\/* prop data format: 8, 16, or 32 *\/$/;"	m	struct:XTextProperty	file:	access:public
format	simpledisplay.d	/^	    ImageFormat format;		\/* XYBitmap, XYPixmap, ZPixmap *\/$/;"	m	struct:XImage	file:	access:public
format	simpledisplay.d	/^	int format;$/;"	m	struct:XClientMessageEvent	file:	access:public
fourBytesToInt	imaged/png.d	/^    int fourBytesToInt(ubyte[] bytes)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] bytes)
fromHex	arsd/color.d	/^int fromHex(string s) {$/;"	f	signature:(string s)
fromHsl	arsd/color.d	/^Color fromHsl(real h, real s, real l) {$/;"	f	signature:(real h, real s, real l)
fromHsl	arsd/color.d	/^Color fromHsl(real[3] hsl) {$/;"	f	signature:(real[3] hsl)
fromHsl	simpledisplay.d	/^Color fromHsl(real h, real s, real l) {$/;"	f	signature:(real h, real s, real l)
from_configure	simpledisplay.d	/^	Bool from_configure;$/;"	m	struct:XUnmapEvent	file:	access:public
g	arsd/color.d	/^	ubyte g;$/;"	m	struct:Color	file:	access:public
g	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
gc	simpledisplay.d	/^		GC gc;$/;"	m	file:
gc	simpledisplay.d	/^		GC gc;$/;"	m	template:NativeSimpleWindowImplementation	file:
generateTestPicture	test/generate.d	/^Image generateTestPicture()$/;"	f	signature:()
get	simpledisplay.d	/^		static Display* get() {$/;"	f	class:XDisplayConnection	access:public	signature:()
getColorType	imaged/png.d	/^    ubyte getColorType(in Image img)$/;"	f	class:PngEncoder	access:public	signature:(in Image img)
getDecoder	imaged/image.d	/^Decoder getDecoder(string filename, bool logging = false)$/;"	f	signature:(string filename, bool logging = false)
getEncoder	imaged/image.d	/^Encoder getEncoder(string filename)$/;"	f	signature:(string filename)
getIndex	imaged/image.d	/^    uint getIndex(size_t x, size_t y)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y)
getPainter	simpledisplay.d	/^		ScreenPainter getPainter() {$/;"	f	template:NativeSimpleWindowImplementation	signature:()
getPixel	imaged/image.d	/^    Pixel getPixel(size_t x, size_t y, bool scaleToByte = true)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
getPixel	imaged/image.d	/^    Pixel getPixel(size_t x, size_t y, bool scaleToByte = true);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
get_pixel	simpledisplay.d	/^			uint function(XImage *, int, int)get_pixel;$/;"	m	struct:XImage::f	file:	access:public
green_mask	simpledisplay.d	/^	    uint green_mask;$/;"	m	struct:XImage	file:	access:public
green_mask	simpledisplay.d	/^	uint red_mask, green_mask, blue_mask;	\/* mask values *\/$/;"	m	struct:Visual	file:	access:public
gx	session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
h_sample	imaged/jpeg.d	/^        h_sample, \/\/ horizontal samples$/;"	m	struct:JpegDecoder::Component	file:	access:public
handle	simpledisplay.d	/^		HBITMAP handle;$/;"	m	template:NativeImageImplementation	file:
handle	simpledisplay.d	/^		XImage* handle;$/;"	m	template:NativeImageImplementation	file:
handleCharEvent	simpledisplay.d	/^	void delegate(dchar c) handleCharEvent;$/;"	m	class:SimpleWindow	file:	access:public
handleKeyEvent	simpledisplay.d	/^	void delegate(int key) handleKeyEvent;$/;"	m	class:SimpleWindow	file:	access:public
handleMouseEvent	simpledisplay.d	/^	void delegate(MouseEvent) handleMouseEvent;$/;"	m	class:SimpleWindow	file:	access:public
handleNativeEvent	simpledisplay.d	/^	NativeEventHandler handleNativeEvent;$/;"	m	class:SimpleWindow	file:	access:public
handlePulse	simpledisplay.d	/^	void delegate() handlePulse;$/;"	m	class:SimpleWindow	file:	access:public
hashKey	imaged/jpeg.d	/^    struct hashKey$/;"	s	class:JpegDecoder	file:	access:public
hdc	simpledisplay.d	/^		HDC hdc;$/;"	m	file:
headerLength	imaged/jpeg.d	/^        int headerLength;$/;"	m	struct:JpegDecoder::JPGSegment	file:	access:public
headerProcessed	imaged/jpeg.d	/^        bool headerProcessed;$/;"	m	struct:JpegDecoder::JPGSegment	file:	access:public
height	imaged/image.d	/^    @property const(uint) height() const { return m_height; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
height	imaged/image.d	/^    @property const(uint) height() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
height	simpledisplay.d	/^	    int width, height;			\/* size of image *\/$/;"	m	struct:XImage	file:	access:public
height	simpledisplay.d	/^	immutable int height;$/;"	m	class:Image	file:	access:public
height	simpledisplay.d	/^	int height;$/;"	m	class:SimpleWindow	file:	access:public
height	simpledisplay.d	/^	int height;$/;"	m	struct:Size	file:	access:public
height	simpledisplay.d	/^	int width, height;		\/* width and height of screen *\/$/;"	m	struct:Screen	file:	access:public
height	simpledisplay.d	/^	int width, height;	\/* size of window *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureEvent	file:	access:public
height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XExposeEvent	file:	access:public
height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
height	simpledisplay.d	/^	int width, height;$/;"	m	struct:XResizeRequestEvent	file:	access:public
huffmanTable	imaged/jpeg.d	/^    ubyte[hashKey] huffmanTable;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::hashKey	file:	access:public
hwnd	simpledisplay.d	/^		HWND hwnd;$/;"	m	file:
hwnd	simpledisplay.d	/^		HWND hwnd;$/;"	m	template:NativeSimpleWindowImplementation	file:
id	imaged/jpeg.d	/^        int id, \/\/ component id$/;"	m	struct:JpegDecoder::Component	file:	access:public
image	imaged/image.d	/^    @property Image image() { return m_image; }$/;"	f	class:Decoder	access:public	signature:()
image	simpledisplay.d	/^	@property void image(Image i) {$/;"	f	class:SimpleWindow	access:public	signature:(Image i)
imageRow	imaged/png.d	/^        int imageRow;$/;"	m	struct:PngDecoder::InterLace	file:	access:public
imaged.bmp	imaged/bmp.d	/^module imaged.bmp;$/;"	M
imaged.image	imaged/image.d	/^module imaged.image;$/;"	M
imaged.jpeg	imaged/jpeg.d	/^module imaged.jpeg;$/;"	M
imaged.png	imaged/png.d	/^module imaged.png;$/;"	M
impl	simpledisplay.d	/^	ScreenPainterImplementation* impl;$/;"	m	struct:ScreenPainter	file:	access:public
impl	simpledisplay.d	/^	mixin NativeImageImplementation!() impl;$/;"	m	class:Image	file:	access:public
impl	simpledisplay.d	/^	mixin NativeSimpleWindowImplementation!() impl;$/;"	m	class:SimpleWindow	file:	access:public
index	imaged/jpeg.d	/^        ubyte index;    \/\/ Table index$/;"	m	struct:JpegDecoder::hashKey	file:	access:public
is_hint	simpledisplay.d	/^	byte is_hint;		\/* detail *\/$/;"	m	struct:XMotionEvent	file:	access:public
key_vector	simpledisplay.d	/^	byte key_vector[32];$/;"	m	struct:XKeymapEvent	file:	access:public
keycode	simpledisplay.d	/^	uint keycode;	\/* detail *\/$/;"	m	struct:XKeyEvent	file:	access:public
l	simpledisplay.d	/^		int l[5];$/;"	m	union:XClientMessageEvent::data	file:	access:public
last_request_read	simpledisplay.d	/^		uint last_request_read; \/* seq number of last event read *\/$/;"	m	struct:Display	file:	access:public
lighten	arsd/color.d	/^Color lighten(Color c, real percentage) {$/;"	f	signature:(Color c, real percentage)
load	imaged/image.d	/^Image load(string filename, out IMGError err, bool logging = false)$/;"	f	signature:(string filename, out IMGError err, bool logging = false)
loadTexture	imaged/image.d	/^    GLuint loadTexture(string filename, GLuint internalFormat = 0,$/;"	f	signature:(string filename, GLuint internalFormat = 0, bool logging = false, IMGError err = IMGError())
m_bitDepth	imaged/image.d	/^    uint m_bitDepth = 0;$/;"	m	class:Img	file:	access:public
m_bitDepth	imaged/png.d	/^    int m_bitDepth,$/;"	m	class:PngDecoder	file:	access:public
m_bytesPerScanline	imaged/png.d	/^        m_bytesPerScanline,$/;"	m	class:PngDecoder	file:	access:public
m_channels	imaged/image.d	/^    uint m_channels = 0;$/;"	m	class:Img	file:	access:public
m_colorType	imaged/png.d	/^        m_colorType,$/;"	m	class:PngDecoder	file:	access:public
m_compression	imaged/png.d	/^        m_compression,$/;"	m	class:PngDecoder	file:	access:public
m_currentScanLine	imaged/png.d	/^    int m_currentScanLine;$/;"	m	class:PngDecoder	file:	access:public
m_data	imaged/image.d	/^    ubyte[] m_data;$/;"	m	class:Img	file:	access:public
m_errorState	imaged/image.d	/^    IMGError m_errorState;$/;"	m	class:Decoder	file:	access:public
m_filter	imaged/png.d	/^        m_filter,$/;"	m	class:PngDecoder	file:	access:public
m_filters	imaged/png.d	/^    static ubyte[] function(in Image, in ubyte[], in ubyte[], out uint)[5] m_filters =$/;"	m	class:PngEncoder	file:	access:public
m_haveHeader	imaged/png.d	/^    bool m_haveHeader = false;$/;"	m	class:PngDecoder	file:	access:public
m_height	imaged/image.d	/^    uint m_width = 0, m_height = 0;$/;"	m	class:Img	file:	access:public
m_height	imaged/png.d	/^    int m_width, m_height;$/;"	m	class:PngDecoder	file:	access:public
m_ilace	imaged/png.d	/^    InterLace m_ilace;$/;"	m	class:PngDecoder	typeref:struct:PngDecoder::InterLace	file:	access:public
m_image	imaged/image.d	/^    Image m_image;$/;"	m	class:Decoder	file:	access:public
m_interlace	imaged/png.d	/^        m_interlace,$/;"	m	class:PngDecoder	file:	access:public
m_interlacePass	imaged/png.d	/^    ubyte m_interlacePass = 0;$/;"	m	class:PngDecoder	file:	access:public
m_logging	imaged/image.d	/^    bool m_logging = false; \/\/ if true, will emit logs when in debug mode$/;"	m	class:Decoder	file:	access:public
m_logging	imaged/jpeg.d	/^    bool m_logging;$/;"	m	class:JpegDecoder	file:	access:public
m_nChannels	imaged/png.d	/^        m_nChannels,$/;"	m	class:PngDecoder	file:	access:public
m_palette	imaged/png.d	/^    ubyte[] m_palette;$/;"	m	class:PngDecoder	file:	access:public
m_pendingChunk	imaged/png.d	/^    bool m_pendingChunk = false;$/;"	m	class:PngDecoder	file:	access:public
m_pixPerLine	imaged/png.d	/^    int[7] m_pixPerLine;$/;"	m	class:PngDecoder	file:	access:public
m_pixelScale	imaged/png.d	/^        m_pixelScale;$/;"	m	class:PngDecoder	file:	access:public
m_previousChunk	imaged/png.d	/^    Chunk m_previousChunk = Chunk.NONE;$/;"	m	class:PngDecoder	file:	access:public
m_scanLines	imaged/png.d	/^    int[7] m_scanLines;$/;"	m	class:PngDecoder	file:	access:public
m_stride	imaged/image.d	/^    int m_stride = 0; \/\/ in bytes (minimum 1)$/;"	m	class:Img	file:	access:public
m_stride	imaged/png.d	/^        m_stride,$/;"	m	class:PngDecoder	file:	access:public
m_totalBytesParsed	imaged/png.d	/^    uint m_totalBytesParsed;$/;"	m	class:PngDecoder	file:	access:public
m_width	imaged/image.d	/^    uint m_width = 0, m_height = 0;$/;"	m	class:Img	file:	access:public
m_width	imaged/png.d	/^    int m_width, m_height;$/;"	m	class:PngDecoder	file:	access:public
main	example.d	/^int main()$/;"	f	signature:()
main	test/generate.d	/^int main()$/;"	f	signature:()
major_code	simpledisplay.d	/^	int major_code;		\/* core is CopyArea or CopyPlane *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
major_code	simpledisplay.d	/^	int major_code;		\/* core is CopyArea or CopyPlane *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
makeAlpha	arsd/color.d	/^ubyte makeAlpha(ubyte colorYouHave, ubyte backgroundColor\/*, ubyte foreground = 0x00*\/) {$/;"	f	signature:(ubyte colorYouHave, ubyte backgroundColor )
makeGLTexture	imaged/image.d	/^    GLuint makeGLTexture(string filename, GLuint internalFormat = 0,$/;"	f	signature:(string filename, GLuint internalFormat = 0, bool logging = false, IMGError err = IMGError())
makeTextColor	arsd/color.d	/^Color makeTextColor(Color c) {$/;"	f	signature:(Color c)
map_entries	simpledisplay.d	/^	int map_entries;	\/* color map entries *\/$/;"	m	struct:Visual	file:	access:public
markerPending	imaged/jpeg.d	/^    bool markerPending = false;$/;"	m	class:JpegDecoder	file:	access:public
max_keycode	simpledisplay.d	/^		int max_keycode;	\/* maximum defined keycode *\/$/;"	m	struct:Display	file:	access:public
max_maps	simpledisplay.d	/^	int max_maps, min_maps;	\/* max and min color maps *\/$/;"	m	struct:Screen	file:	access:public
max_request_size	simpledisplay.d	/^		uint max_request_size; \/* maximum number 32 bit words in request*\/$/;"	m	struct:Display	file:	access:public
message	imaged/image.d	/^    string message;$/;"	m	struct:IMGError	file:	access:public
message_type	simpledisplay.d	/^	Atom message_type;$/;"	m	struct:XClientMessageEvent	file:	access:public
mheight	simpledisplay.d	/^	int mwidth, mheight;	\/* width and height of  in millimeters *\/$/;"	m	struct:Screen	file:	access:public
min_keycode	simpledisplay.d	/^		int min_keycode;	\/* minimum defined keycode *\/$/;"	m	struct:Display	file:	access:public
min_maps	simpledisplay.d	/^	int max_maps, min_maps;	\/* max and min color maps *\/$/;"	m	struct:Screen	file:	access:public
minor_code	simpledisplay.d	/^	int minor_code;		\/* not defined in the core *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
minor_code	simpledisplay.d	/^	int minor_code;		\/* not defined in the core *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
minor_code	simpledisplay.d	/^	ubyte minor_code;	\/* Minor op-code of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
mode	simpledisplay.d	/^	NotifyModes mode;		\/* NotifyNormal, NotifyGrab, NotifyUngrab *\/$/;"	m	struct:XCrossingEvent	file:	access:public
mode	simpledisplay.d	/^	NotifyModes mode;		\/* NotifyNormal, NotifyWhileGrabbed,$/;"	m	struct:XFocusChangeEvent	file:	access:public
moderate	arsd/color.d	/^Color moderate(Color c, real percentage) {$/;"	f	signature:(Color c, real percentage)
motion_buffer	simpledisplay.d	/^		uint motion_buffer;	\/* size of motion buffer *\/$/;"	m	struct:Display	file:	access:public
mwidth	simpledisplay.d	/^	int mwidth, mheight;	\/* width and height of  in millimeters *\/$/;"	m	struct:Screen	file:	access:public
nBits	imaged/jpeg.d	/^        ubyte nBits;    \/\/ Number of bits in code$/;"	m	struct:JpegDecoder::hashKey	file:	access:public
nCmpBlocks	imaged/jpeg.d	/^        ubyte[3] dct, act, nCmpBlocks; \/\/ dct, act store the DC and AC table indexes for each component$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
nCodes	imaged/jpeg.d	/^    ubyte[16] nCodes; \/\/ Number of codes of each bit length (cleared after each table is defined)$/;"	m	class:JpegDecoder	file:	access:public
nComponents	imaged/jpeg.d	/^    ubyte nComponents, precision;$/;"	m	class:JpegDecoder	file:	access:public
ndepths	simpledisplay.d	/^	int ndepths;			\/* number of depths possible *\/$/;"	m	struct:Screen	file:	access:public
nearestNeighbourResample	imaged/jpeg.d	/^    void nearestNeighbourResample(uint cmpIndex)$/;"	f	class:JpegDecoder	access:public	signature:(uint cmpIndex)
needBits	imaged/jpeg.d	/^        uint buffer = 0, bufferLength = 0, needBits = 0;$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
new_	simpledisplay.d	/^	Bool new_;		\/* C++ *\/$/;"	m	struct:XColormapEvent	file:	access:public
nformats	simpledisplay.d	/^		int nformats;		\/* number of pixmap formats in list *\/$/;"	m	struct:Display	file:	access:public
nitems	simpledisplay.d	/^		uint nitems;		\/* number of data items in value *\/$/;"	m	struct:XTextProperty	file:	access:public
nscreens	simpledisplay.d	/^		int nscreens;		\/* number of screens on this server*\/$/;"	m	struct:Display	file:	access:public
nvisuals	simpledisplay.d	/^	int nvisuals;		\/* number of Visual types at this depth *\/$/;"	m	struct:Depth	file:	access:public
nxMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
nyMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
obdata	simpledisplay.d	/^	    XPointer obdata;			\/* hook for the object routines to hang on *\/$/;"	m	struct:XImage	file:	access:public
oldBmp	simpledisplay.d	/^		HBITMAP oldBmp;$/;"	m	file:
opIndex	imaged/image.d	/^    Pixel opIndex(size_t x, size_t y, bool scaleToByte = true)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
opIndex	imaged/image.d	/^    Pixel opIndex(size_t x, size_t y, bool scaleToByte = true);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, bool scaleToByte = true)
opIndexAssign	simpledisplay.d	/^	void opIndexAssign(Color c, int x, int y) {$/;"	f	class:Image	access:public	signature:(Color c, int x, int y)
oppositeLightness	arsd/color.d	/^Color oppositeLightness(Color c) {$/;"	f	signature:(Color c)
originalBrush	simpledisplay.d	/^		HBRUSH originalBrush;$/;"	m	file:
originalPen	simpledisplay.d	/^		HPEN originalPen;$/;"	m	file:
outlineColor	simpledisplay.d	/^		@property void outlineColor(Color c) {$/;"	f	signature:(Color c)
outlineColor	simpledisplay.d	/^	@property void outlineColor(Color c) {$/;"	f	struct:ScreenPainter	access:public	signature:(Color c)
override_redirect	simpledisplay.d	/^	Bool override_redirect;	\/* Boolean, is override set... *\/$/;"	m	struct:XMapEvent	file:	access:public
override_redirect	simpledisplay.d	/^	Bool override_redirect;	\/* creation should be overridden *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
override_redirect	simpledisplay.d	/^	Bool override_redirect;$/;"	m	struct:XConfigureEvent	file:	access:public
override_redirect	simpledisplay.d	/^	Bool override_redirect;$/;"	m	struct:XReparentEvent	file:	access:public
owner	simpledisplay.d	/^	Window owner;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
pad	simpledisplay.d	/^	int pad[24];$/;"	m	union:XEvent	file:	access:public
parent	simpledisplay.d	/^	Window parent;		\/* parent of the window *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XCirculateRequestEvent	file:	access:public
parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XMapRequestEvent	file:	access:public
parent	simpledisplay.d	/^	Window parent;$/;"	m	struct:XReparentEvent	file:	access:public
parseByte	imaged/image.d	/^    void parseByte(ubyte bite);$/;"	p	class:Decoder	file:	access:public	signature:(ubyte bite)
parseByte	imaged/jpeg.d	/^    override void parseByte(ubyte bite)$/;"	f	class:JpegDecoder	access:public	signature:(ubyte bite)
parseByte	imaged/png.d	/^    override void parseByte(ubyte bite)$/;"	f	class:PngDecoder	access:public	signature:(ubyte bite)
parseFile	imaged/image.d	/^    void parseFile(in string filename)$/;"	f	class:Decoder	access:public	signature:(in string filename)
parseStream	imaged/image.d	/^    size_t parseStream(Stream stream, in size_t chunkSize = 100000)$/;"	f	class:Decoder	access:public	signature:(Stream stream, in size_t chunkSize = 100000)
passInfo	imaged/png.d	/^    void passInfo(out int bytesPerLine, out int nscanLines)$/;"	f	class:PngDecoder	access:public	signature:(out int bytesPerLine, out int nscanLines)
pixelFormat	imaged/image.d	/^    @property const(Px) pixelFormat() const { return F; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
pixelFormat	imaged/image.d	/^    @property const(Px) pixelFormat() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
pixels	imaged/image.d	/^    @property const(ubyte[]) pixels() const { return m_data; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
pixels	imaged/image.d	/^    @property const(ubyte[]) pixels() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
pixels	imaged/image.d	/^    @property ref ubyte[] pixels() { return m_data; } \/\/ ditto$/;"	f	class:Img	access:public	signature:()
pixels	imaged/image.d	/^    @property ref ubyte[] pixels(); \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:()
pixelsPtr	imaged/image.d	/^    @property ubyte* pixelsPtr() { return m_data.ptr; } \/\/ ditto$/;"	f	class:Img	access:public	signature:()
pixelsPtr	imaged/image.d	/^    @property ubyte* pixelsPtr(); \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:()
pixmap_format	simpledisplay.d	/^		ScreenFormat *pixmap_format;	\/* pixmap format list *\/$/;"	m	struct:Display	file:	access:public
place	simpledisplay.d	/^	CirculationRequest place;		\/* PlaceOnTop, PlaceOnBottom *\/$/;"	m	struct:XCirculateEvent	file:	access:public
place	simpledisplay.d	/^	CirculationRequest place;		\/* PlaceOnTop, PlaceOnBottom *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
precision	imaged/jpeg.d	/^    ubyte nComponents, precision;$/;"	m	class:JpegDecoder	file:	access:public
previousMarker	imaged/jpeg.d	/^    Marker previousMarker = Marker.None;$/;"	m	class:JpegDecoder	file:	access:public
private1	simpledisplay.d	/^		_XPrivate *private1;$/;"	m	struct:Display	file:	access:public
private10	simpledisplay.d	/^		_XPrivate *private10;$/;"	m	struct:Display	file:	access:public
private11	simpledisplay.d	/^		XPointer private11;$/;"	m	struct:Display	file:	access:public
private12	simpledisplay.d	/^		XPointer private12;$/;"	m	struct:Display	file:	access:public
private13	simpledisplay.d	/^		XPointer private13;$/;"	m	struct:Display	file:	access:public
private14	simpledisplay.d	/^		XPointer private14;$/;"	m	struct:Display	file:	access:public
private15	simpledisplay.d	/^		int function  (Display*)private15;$/;"	m	struct:Display	file:	access:public
private16	simpledisplay.d	/^		uint private16;$/;"	m	struct:Display	file:	access:public
private17	simpledisplay.d	/^		XPointer private17;$/;"	m	struct:Display	file:	access:public
private18	simpledisplay.d	/^		XPointer private18;$/;"	m	struct:Display	file:	access:public
private19	simpledisplay.d	/^		int private19;$/;"	m	struct:Display	file:	access:public
private2	simpledisplay.d	/^		int private2;$/;"	m	struct:Display	file:	access:public
private3	simpledisplay.d	/^	    	XID private3;$/;"	m	struct:Display	file:	access:public
private4	simpledisplay.d	/^		XID private4;$/;"	m	struct:Display	file:	access:public
private5	simpledisplay.d	/^		XID private5;$/;"	m	struct:Display	file:	access:public
private6	simpledisplay.d	/^		int private6;$/;"	m	struct:Display	file:	access:public
private8	simpledisplay.d	/^		int private8;$/;"	m	struct:Display	file:	access:public
private9	simpledisplay.d	/^		_XPrivate *private9;$/;"	m	struct:Display	file:	access:public
processChunk	imaged/png.d	/^    void processChunk()$/;"	f	class:PngDecoder	access:public	signature:()
processHeader	imaged/jpeg.d	/^    void processHeader()$/;"	f	class:JpegDecoder	access:public	signature:()
processHuffmanCode	imaged/jpeg.d	/^    void processHuffmanCode(short huffCode)$/;"	f	class:JpegDecoder	access:public	signature:(short huffCode)
property	simpledisplay.d	/^	Atom property;		\/* ATOM or None *\/$/;"	m	struct:XSelectionEvent	file:	access:public
property	simpledisplay.d	/^	Atom property;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
proto_major_version	simpledisplay.d	/^		int proto_major_version;\/* major version of server's X protocol *\/$/;"	m	struct:Display	file:	access:public
proto_minor_version	simpledisplay.d	/^		int proto_minor_version;\/* minor version of servers X protocol *\/$/;"	m	struct:Display	file:	access:public
putPixel	simpledisplay.d	/^	void putPixel(int x, int y, Color c) {$/;"	f	class:Image	access:public	signature:(int x, int y, Color c)
put_pixel	simpledisplay.d	/^			int  function(XImage *, int, int, uint)put_pixel;$/;"	m	struct:XImage::f	file:	access:public
qlen	simpledisplay.d	/^		int qlen;		\/* Length of input event queue *\/$/;"	m	struct:Display	file:	access:public
qtt	imaged/jpeg.d	/^        qtt, \/\/ quantization table id$/;"	m	struct:JpegDecoder::Component	file:	access:public
quantTable	imaged/jpeg.d	/^    ubyte[][int] quantTable;$/;"	m	class:JpegDecoder	file:	access:public
r	arsd/color.d	/^	ubyte r;$/;"	m	struct:Color	file:	access:public
r	imaged/image.d	/^    ushort r, g, b, a = 255;$/;"	m	struct:Pixel	file:	access:public
rawData	simpledisplay.d	/^		byte* rawData;$/;"	m	template:NativeImageImplementation	file:
red_mask	simpledisplay.d	/^	    uint red_mask;	\/* bits in z arrangment *\/$/;"	m	struct:XImage	file:	access:public
red_mask	simpledisplay.d	/^	uint red_mask, green_mask, blue_mask;	\/* mask values *\/$/;"	m	struct:Visual	file:	access:public
referenceCount	simpledisplay.d	/^		int referenceCount;$/;"	m	struct:ScreenPainterImplementation	file:	access:public
release	simpledisplay.d	/^		int release;		\/* release of the server *\/$/;"	m	struct:Display	file:	access:public
request	simpledisplay.d	/^		uint request;	\/* sequence number of last request. *\/$/;"	m	struct:Display	file:	access:public
request	simpledisplay.d	/^	MappingType request;		\/* one of MappingModifier, MappingKeyboard,$/;"	m	struct:XMappingEvent	file:	access:public
request_code	simpledisplay.d	/^	ubyte request_code;	\/* Major op-code of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
requestor	simpledisplay.d	/^	Window requestor;$/;"	m	struct:XSelectionEvent	file:	access:public
requestor	simpledisplay.d	/^	Window requestor;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
resampleDgt	imaged/jpeg.d	/^    void delegate(uint cmpIndex) resampleDgt;$/;"	m	class:JpegDecoder	file:	access:public
resize	imaged/image.d	/^    bool resize(uint newWidth, uint newHeight, ResizeAlgo algo = ResizeAlgo.NEAREST);$/;"	p	virtual:Image	file:	access:public	signature:(uint newWidth, uint newHeight, ResizeAlgo algo = ResizeAlgo.NEAREST)
resize	imaged/image.d	/^    bool resize(uint newWidth, uint newHeight, ResizeAlgo algo)$/;"	f	class:Img	access:public	signature:(uint newWidth, uint newHeight, ResizeAlgo algo)
resource_alloc	simpledisplay.d	/^		XID function(Display*)resource_alloc;\/* allocator function *\/$/;"	m	struct:Display	file:	access:public
resourceid	simpledisplay.d	/^	XID resourceid;		\/* resource id *\/$/;"	m	struct:XErrorEvent	file:	access:public
restartInterval	imaged/jpeg.d	/^        int restartInterval; \/\/ How many MCU's are parsed before a restart (reset the DC terms)$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
root	simpledisplay.d	/^	Window root;			\/* Root window id. *\/$/;"	m	struct:Screen	file:	access:public
root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XButtonEvent	file:	access:public
root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XCrossingEvent	file:	access:public
root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XKeyEvent	file:	access:public
root	simpledisplay.d	/^	Window root;	        \/* root window that the event occurred on *\/$/;"	m	struct:XMotionEvent	file:	access:public
root_depth	simpledisplay.d	/^	int root_depth;			\/* bits per pixel *\/$/;"	m	struct:Screen	file:	access:public
root_input_mask	simpledisplay.d	/^	int root_input_mask;	\/* initial root input mask *\/$/;"	m	struct:Screen	file:	access:public
root_visual	simpledisplay.d	/^	Visual *root_visual;	\/* root visual *\/$/;"	m	struct:Screen	file:	access:public
rotateHue	arsd/color.d	/^Color rotateHue(Color c, real degrees) {$/;"	f	signature:(Color c, real degrees)
rowIDCT	imaged/jpeg.d	/^    void rowIDCT(int* block, ubyte* outData)$/;"	f	class:JpegDecoder	access:public	signature:(int* block, ubyte* outData)
row_increment	imaged/png.d	/^        int[7] row_increment =  [ 8, 8, 8, 4, 4, 2, 2 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
s	simpledisplay.d	/^		short s[10];$/;"	m	union:XClientMessageEvent::data	file:	access:public
s:cpo_save	session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	session.vim	/^let s:l = 57 - ((50 * winheight(0) + 38) \/ 76)$/;"	v
s:l	session.vim	/^let s:l = 6 - ((5 * winheight(0) + 38) \/ 76)$/;"	v
s:l	session.vim	/^let s:l = 797 - ((280 * winheight(0) + 38) \/ 76)$/;"	v
s:so_save	session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XButtonEvent	file:	access:public
same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XCrossingEvent	file:	access:public
same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XKeyEvent	file:	access:public
same_screen	simpledisplay.d	/^	Bool same_screen;	\/* same screen flag *\/$/;"	m	struct:XMotionEvent	file:	access:public
saturate	arsd/color.d	/^Color saturate(Color c, real percentage) {$/;"	f	signature:(Color c, real percentage)
save_unders	simpledisplay.d	/^	bool save_unders;$/;"	m	struct:Screen	file:	access:public
scState	imaged/jpeg.d	/^    ScanState scState; \/\/ ditto$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::ScanState	file:	access:public
scanLine1	imaged/png.d	/^    ubyte[] scanLine1, scanLine2;$/;"	m	class:PngDecoder	file:	access:public
scanLine2	imaged/png.d	/^    ubyte[] scanLine1, scanLine2;$/;"	m	class:PngDecoder	file:	access:public
screens	simpledisplay.d	/^		Screen *screens;	\/* pointer to list of screens *\/$/;"	m	struct:Display	file:	access:public
segment	imaged/jpeg.d	/^    JPGSegment segment;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::JPGSegment	file:	access:public
segment	imaged/png.d	/^    PNGSegment segment;$/;"	m	class:PngDecoder	typeref:struct:PngDecoder::PNGSegment	file:	access:public
segmentBytesParsed	imaged/jpeg.d	/^    ulong segmentBytesParsed = 0;$/;"	m	class:JpegDecoder	file:	access:public
selection	simpledisplay.d	/^	Atom selection;$/;"	m	struct:XSelectionClearEvent	file:	access:public
selection	simpledisplay.d	/^	Atom selection;$/;"	m	struct:XSelectionEvent	file:	access:public
selection	simpledisplay.d	/^	Atom selection;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XAnyEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XButtonEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCirculateEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XClientMessageEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XColormapEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XConfigureEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XCrossingEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XDestroyWindowEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XExposeEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XGravityEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XKeyEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XKeymapEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMapEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMapRequestEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMappingEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XMotionEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XPropertyEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XReparentEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XResizeRequestEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XSelectionClearEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XSelectionEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XSelectionRequestEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XUnmapEvent	file:	access:public
send_event	simpledisplay.d	/^	Bool send_event;	\/* true if this came from a SendEvent request *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
serial	simpledisplay.d	/^	ubyte serial;	\/* # of last request processed by server *\/$/;"	m	struct:XAnyEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XDestroyWindowEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XKeyEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XMapEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;		\/* # of last request processed by server *\/$/;"	m	struct:XUnmapEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XButtonEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCirculateEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCirculateRequestEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XClientMessageEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XColormapEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XConfigureEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XConfigureRequestEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XCrossingEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XExposeEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XGravityEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XKeymapEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XMapRequestEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XMappingEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XMotionEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XNoExposeEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XPropertyEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XReparentEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XResizeRequestEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XSelectionClearEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XSelectionEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XSelectionRequestEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* # of last request processed by server *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
serial	simpledisplay.d	/^	uint serial;	\/* serial number of failed request *\/$/;"	m	struct:XErrorEvent	file:	access:public
setHue	arsd/color.d	/^Color setHue(Color c, real hue) {$/;"	f	signature:(Color c, real hue)
setInterlace	imaged/png.d	/^    void setInterlace()$/;"	f	class:PngDecoder	access:public	signature:()
setLightness	arsd/color.d	/^Color setLightness(Color c, real lightness) {$/;"	f	signature:(Color c, real lightness)
setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, Pixel p)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, Pixel p)
setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, Pixel p);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, Pixel p)
setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, const(ubyte[]) data)$/;"	f	class:Img	access:public	signature:(size_t x, size_t y, const(ubyte[]) data)
setPixel	imaged/image.d	/^    void setPixel(size_t x, size_t y, const(ubyte[]) data);$/;"	p	virtual:Image	file:	access:public	signature:(size_t x, size_t y, const(ubyte[]) data)
setPixel	simpledisplay.d	/^		void setPixel(int x, int y, Color c) {$/;"	f	template:NativeImageImplementation	signature:(int x, int y, Color c)
setRow	imaged/image.d	/^    void setRow(size_t y, const(ubyte[]) data)$/;"	f	class:Img	access:public	signature:(size_t y, const(ubyte[]) data)
setRow	imaged/image.d	/^    void setRow(size_t y, const(ubyte[]) data);$/;"	p	virtual:Image	file:	access:public	signature:(size_t y, const(ubyte[]) data)
setSaturation	arsd/color.d	/^Color setSaturation(Color c, real saturation) {$/;"	f	signature:(Color c, real saturation)
simpledisplay	simpledisplay.d	/^module simpledisplay;$/;"	M
sosAction	imaged/jpeg.d	/^    void sosAction(ubyte bite)$/;"	f	class:JpegDecoder	access:public	signature:(ubyte bite)
start_col	imaged/png.d	/^        int[7] start_col =      [ 0, 4, 0, 2, 0, 1, 0 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
start_row	imaged/png.d	/^        int[7] start_row =      [ 0, 0, 4, 0, 2, 0, 1 ];$/;"	m	struct:PngDecoder::InterLace	file:	access:public
state	simpledisplay.d	/^	ColorMapNotification state;		\/* ColormapInstalled, ColormapUninstalled *\/$/;"	m	struct:XColormapEvent	file:	access:public
state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XButtonEvent	file:	access:public
state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XCrossingEvent	file:	access:public
state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XKeyEvent	file:	access:public
state	simpledisplay.d	/^	KeyOrButtonMask state;	\/* key or button mask *\/$/;"	m	struct:XMotionEvent	file:	access:public
state	simpledisplay.d	/^	PropertyNotification state;		\/* NewValue, Deleted *\/$/;"	m	struct:XPropertyEvent	file:	access:public
state	simpledisplay.d	/^	VisibilityNotify state;		\/* Visibility state *\/$/;"	m	struct:XVisibilityEvent	file:	access:public
stride	imaged/image.d	/^    @property const(int) stride() const { return m_stride; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
stride	imaged/image.d	/^    @property const(int) stride() const; \/\/ ditto$/;"	p	virtual:Image	file:	access:public	signature:() const
style	simpledisplay.d	/^	Style style;$/;"	m	struct:Pen	file:	access:public
sub_image	simpledisplay.d	/^			XImage function(XImage *, int, int, uint, uint)sub_image;$/;"	m	struct:XImage::f	file:	access:public
subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XButtonEvent	file:	access:public
subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XCrossingEvent	file:	access:public
subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XKeyEvent	file:	access:public
subwindow	simpledisplay.d	/^	Window subwindow;	\/* child window *\/$/;"	m	struct:XMotionEvent	file:	access:public
swapColors	simpledisplay.d	/^		void swapColors() {$/;"	f	signature:()
target	simpledisplay.d	/^	Atom target;$/;"	m	struct:XSelectionEvent	file:	access:public
target	simpledisplay.d	/^	Atom target;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XButtonEvent	file:	access:public
time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XCrossingEvent	file:	access:public
time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XKeyEvent	file:	access:public
time	simpledisplay.d	/^	Time time;		\/* milliseconds *\/$/;"	m	struct:XMotionEvent	file:	access:public
time	simpledisplay.d	/^	Time time;$/;"	m	struct:XPropertyEvent	file:	access:public
time	simpledisplay.d	/^	Time time;$/;"	m	struct:XSelectionClearEvent	file:	access:public
time	simpledisplay.d	/^	Time time;$/;"	m	struct:XSelectionEvent	file:	access:public
time	simpledisplay.d	/^	Time time;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
toHsl	arsd/color.d	/^real[3] toHsl(Color c, bool useWeightedLightness = false) {$/;"	f	signature:(Color c, bool useWeightedLightness = false)
toString	arsd/color.d	/^	string toString() {$/;"	f	struct:Color	access:public	signature:()
totalBytesParsed	imaged/jpeg.d	/^    ulong totalBytesParsed = 0;$/;"	m	class:JpegDecoder	file:	access:public
transparent	arsd/color.d	/^	static Color transparent() {$/;"	f	struct:Color	access:public	signature:()
type	imaged/png.d	/^        string type;$/;"	m	struct:PngEncoder::PNGChunk	file:	access:public
type	simpledisplay.d	/^	int type;			\/* of event *\/$/;"	m	struct:XKeyEvent	file:	access:public
type	simpledisplay.d	/^	int type;		\/* FocusIn or FocusOut *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
type	simpledisplay.d	/^	int type;		\/* of event *\/$/;"	m	struct:XButtonEvent	file:	access:public
type	simpledisplay.d	/^	int type;		\/* of event *\/$/;"	m	struct:XCrossingEvent	file:	access:public
type	simpledisplay.d	/^	int type;		\/* of event *\/$/;"	m	struct:XMotionEvent	file:	access:public
type	simpledisplay.d	/^	int type; \/\/ movement, press, release, double click$/;"	m	struct:MouseEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XAnyEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XCirculateEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XCirculateRequestEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XClientMessageEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XColormapEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XConfigureEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XCreateWindowEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XDestroyWindowEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XErrorEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XExposeEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XGravityEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XKeymapEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XMapEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XMapRequestEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XMappingEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XNoExposeEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XPropertyEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XReparentEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XResizeRequestEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XSelectionClearEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XSelectionEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XSelectionRequestEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XUnmapEvent	file:	access:public
type	simpledisplay.d	/^	int type;$/;"	m	struct:XVisibilityEvent	file:	access:public
type	simpledisplay.d	/^    int type;		\/* must not be changed; first element *\/$/;"	m	union:XEvent	file:	access:public
unalpha	arsd/color.d	/^ubyte unalpha(ubyte colorYouHave, float alpha, ubyte backgroundColor) {$/;"	f	signature:(ubyte colorYouHave, float alpha, ubyte backgroundColor)
uncompressStream	imaged/png.d	/^    void uncompressStream(ubyte[] stream, bool finalize = false)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] stream, bool finalize = false)
unpackBits	imaged/png.d	/^    ubyte[] unpackBits(ubyte[] data)$/;"	f	class:PngDecoder	access:public	signature:(ubyte[] data)
updateDisplay	simpledisplay.d	/^	void updateDisplay() {$/;"	f	struct:ScreenPainter	access:public	signature:()
v_sample	imaged/jpeg.d	/^        v_sample; \/\/ vertical samples$/;"	m	struct:JpegDecoder::Component	file:	access:public
value	simpledisplay.d	/^		const(char)* value;		\/* same as Property routines *\/$/;"	m	struct:XTextProperty	file:	access:public
value_mask	simpledisplay.d	/^	uint value_mask;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
vendor	simpledisplay.d	/^		char *vendor;		\/* vendor of the server hardware *\/$/;"	m	struct:Display	file:	access:public
visualid	simpledisplay.d	/^	VisualID visualid;	\/* visual id of this visual *\/$/;"	m	struct:Visual	file:	access:public
visuals	simpledisplay.d	/^	Visual *visuals;	\/* list of visuals possible at this depth *\/$/;"	m	struct:Depth	file:	access:public
white	arsd/color.d	/^	static Color white() {$/;"	f	struct:Color	access:public	signature:()
white_pixel	simpledisplay.d	/^	uint white_pixel;$/;"	m	struct:Screen	file:	access:public
width	imaged/image.d	/^    @property const(uint) width() const { return m_width; } \/\/ ditto$/;"	f	class:Img	access:public	signature:() const
width	imaged/image.d	/^    @property const(uint) width() const;$/;"	p	virtual:Image	file:	access:public	signature:() const
width	simpledisplay.d	/^	    int width, height;			\/* size of image *\/$/;"	m	struct:XImage	file:	access:public
width	simpledisplay.d	/^	immutable int width;$/;"	m	class:Image	file:	access:public
width	simpledisplay.d	/^	int width, height;		\/* width and height of screen *\/$/;"	m	struct:Screen	file:	access:public
width	simpledisplay.d	/^	int width, height;	\/* size of window *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureEvent	file:	access:public
width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XExposeEvent	file:	access:public
width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
width	simpledisplay.d	/^	int width, height;$/;"	m	struct:XResizeRequestEvent	file:	access:public
width	simpledisplay.d	/^	int width;$/;"	m	class:SimpleWindow	file:	access:public
width	simpledisplay.d	/^	int width;$/;"	m	struct:Pen	file:	access:public
width	simpledisplay.d	/^	int width;$/;"	m	struct:Size	file:	access:public
window	simpledisplay.d	/^		SimpleWindow window;$/;"	m	struct:ScreenPainterImplementation	file:	access:public
window	simpledisplay.d	/^		Window window;$/;"	m	template:NativeSimpleWindowImplementation	file:
window	simpledisplay.d	/^	SimpleWindow window;$/;"	m	struct:ScreenPainter	file:	access:public
window	simpledisplay.d	/^	Window window;		\/* unused *\/$/;"	m	struct:XMappingEvent	file:	access:public
window	simpledisplay.d	/^	Window window;		\/* window id of window created *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
window	simpledisplay.d	/^	Window window;		\/* window of event *\/$/;"	m	struct:XFocusChangeEvent	file:	access:public
window	simpledisplay.d	/^	Window window;	        \/* "event" window it is reported relative to *\/$/;"	m	struct:XButtonEvent	file:	access:public
window	simpledisplay.d	/^	Window window;	        \/* "event" window it is reported relative to *\/$/;"	m	struct:XKeyEvent	file:	access:public
window	simpledisplay.d	/^	Window window;	        \/* "event" window reported relative to *\/$/;"	m	struct:XCrossingEvent	file:	access:public
window	simpledisplay.d	/^	Window window;	        \/* "event" window reported relative to *\/$/;"	m	struct:XMotionEvent	file:	access:public
window	simpledisplay.d	/^	Window window;	\/* window on which event was requested in event mask *\/$/;"	m	struct:XAnyEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XCirculateEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XCirculateRequestEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XClientMessageEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XColormapEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XConfigureEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XDestroyWindowEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XExposeEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XGravityEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XKeymapEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XMapEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XMapRequestEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XPropertyEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XReparentEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XResizeRequestEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XSelectionClearEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XUnmapEvent	file:	access:public
window	simpledisplay.d	/^	Window window;$/;"	m	struct:XVisibilityEvent	file:	access:public
windowHdc	simpledisplay.d	/^		HDC windowHdc;$/;"	m	file:
windowProcedure	simpledisplay.d	/^		int windowProcedure(HWND hwnd, uint msg, WPARAM wParam, LPARAM lParam) {$/;"	f	template:NativeSimpleWindowImplementation	signature:(HWND hwnd, uint msg, WPARAM wParam, LPARAM lParam)
write	imaged/bmp.d	/^    override bool write(in Image img, string filename)$/;"	f	class:BmpEncoder	access:public	signature:(in Image img, string filename)
write	imaged/image.d	/^    bool write(in Image img, string filename);$/;"	p	class:Encoder	file:	access:public	signature:(in Image img, string filename)
write	imaged/image.d	/^    bool write(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION)$/;"	f	class:Img	access:public	signature:(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION)
write	imaged/image.d	/^    bool write(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION);$/;"	p	virtual:Image	file:	access:public	signature:(string filename, ImageFormat fmt = ImageFormat.GETFROMEXTENSION)
write	imaged/png.d	/^    override bool write(in Image img, string filename)$/;"	f	class:PngEncoder	access:public	signature:(in Image img, string filename)
writeLE2	imaged/bmp.d	/^    static void writeLE2(ref File fp, ushort value)$/;"	f	class:BmpEncoder	access:public	signature:(ref File fp, ushort value)
writeLE4	imaged/bmp.d	/^    static void writeLE4(ref File fp, uint value)$/;"	f	class:BmpEncoder	access:public	signature:(ref File fp, uint value)
x	imaged/jpeg.d	/^        int x, y; \/\/ x, y are size of MCU$/;"	m	struct:JpegDecoder::Component	file:	access:public
x	imaged/jpeg.d	/^    short x, y; \/\/ These are the final image width and height$/;"	m	class:JpegDecoder	file:	access:public
x	simpledisplay.d	/^		short x;$/;"	m	struct:XPoint	file:	access:public
x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XButtonEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XCrossingEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XKeyEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XMotionEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;		\/* window location *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XExposeEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGravityEvent	file:	access:public
x	simpledisplay.d	/^	int x, y;$/;"	m	struct:XReparentEvent	file:	access:public
x	simpledisplay.d	/^	int x;$/;"	m	struct:MouseEvent	file:	access:public
x	simpledisplay.d	/^	int x;$/;"	m	struct:Point	file:	access:public
xMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XButtonEvent	file:	access:public
x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XCrossingEvent	file:	access:public
x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XKeyEvent	file:	access:public
x_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XMotionEvent	file:	access:public
xany	simpledisplay.d	/^	XAnyEvent xany;$/;"	m	union:XEvent	file:	access:public
xbutton	simpledisplay.d	/^	XButtonEvent xbutton;$/;"	m	union:XEvent	file:	access:public
xcirculate	simpledisplay.d	/^	XCirculateEvent xcirculate;$/;"	m	union:XEvent	file:	access:public
xcirculaterequest	simpledisplay.d	/^	XCirculateRequestEvent xcirculaterequest;$/;"	m	union:XEvent	file:	access:public
xclient	simpledisplay.d	/^	XClientMessageEvent xclient;$/;"	m	union:XEvent	file:	access:public
xcolormap	simpledisplay.d	/^	XColormapEvent xcolormap;$/;"	m	union:XEvent	file:	access:public
xconfigure	simpledisplay.d	/^	XConfigureEvent xconfigure;$/;"	m	union:XEvent	file:	access:public
xconfigurerequest	simpledisplay.d	/^	XConfigureRequestEvent xconfigurerequest;$/;"	m	union:XEvent	file:	access:public
xcreatewindow	simpledisplay.d	/^	XCreateWindowEvent xcreatewindow;$/;"	m	union:XEvent	file:	access:public
xcrossing	simpledisplay.d	/^	XCrossingEvent xcrossing;$/;"	m	union:XEvent	file:	access:public
xdefaults	simpledisplay.d	/^		byte *xdefaults;	\/* contents of defaults from server *\/$/;"	m	struct:Display	file:	access:public
xdestroywindow	simpledisplay.d	/^	XDestroyWindowEvent xdestroywindow;$/;"	m	union:XEvent	file:	access:public
xerror	simpledisplay.d	/^	XErrorEvent xerror;$/;"	m	union:XEvent	file:	access:public
xexpose	simpledisplay.d	/^	XExposeEvent xexpose;$/;"	m	union:XEvent	file:	access:public
xfocus	simpledisplay.d	/^	XFocusChangeEvent xfocus;$/;"	m	union:XEvent	file:	access:public
xgraphicsexpose	simpledisplay.d	/^	XGraphicsExposeEvent xgraphicsexpose;$/;"	m	union:XEvent	file:	access:public
xgravity	simpledisplay.d	/^	XGravityEvent xgravity;$/;"	m	union:XEvent	file:	access:public
xkey	simpledisplay.d	/^	XKeyEvent xkey;$/;"	m	union:XEvent	file:	access:public
xkeymap	simpledisplay.d	/^	XKeymapEvent xkeymap;$/;"	m	union:XEvent	file:	access:public
xmap	simpledisplay.d	/^	XMapEvent xmap;$/;"	m	union:XEvent	file:	access:public
xmapping	simpledisplay.d	/^	XMappingEvent xmapping;$/;"	m	union:XEvent	file:	access:public
xmaprequest	simpledisplay.d	/^	XMapRequestEvent xmaprequest;$/;"	m	union:XEvent	file:	access:public
xmotion	simpledisplay.d	/^	XMotionEvent xmotion;$/;"	m	union:XEvent	file:	access:public
xnoexpose	simpledisplay.d	/^	XNoExposeEvent xnoexpose;$/;"	m	union:XEvent	file:	access:public
xoffset	simpledisplay.d	/^	    int xoffset;				\/* number of pixels offset in X direction *\/$/;"	m	struct:XImage	file:	access:public
xproperty	simpledisplay.d	/^	XPropertyEvent xproperty;$/;"	m	union:XEvent	file:	access:public
xreparent	simpledisplay.d	/^	XReparentEvent xreparent;$/;"	m	union:XEvent	file:	access:public
xresizerequest	simpledisplay.d	/^	XResizeRequestEvent xresizerequest;$/;"	m	union:XEvent	file:	access:public
xselection	simpledisplay.d	/^	XSelectionEvent xselection;$/;"	m	union:XEvent	file:	access:public
xselectionclear	simpledisplay.d	/^	XSelectionClearEvent xselectionclear;$/;"	m	union:XEvent	file:	access:public
xselectionrequest	simpledisplay.d	/^	XSelectionRequestEvent xselectionrequest;$/;"	m	union:XEvent	file:	access:public
xunmap	simpledisplay.d	/^	XUnmapEvent xunmap;$/;"	m	union:XEvent	file:	access:public
xvisibility	simpledisplay.d	/^	XVisibilityEvent xvisibility;$/;"	m	union:XEvent	file:	access:public
y	imaged/jpeg.d	/^        int x, y; \/\/ x, y are size of MCU$/;"	m	struct:JpegDecoder::Component	file:	access:public
y	imaged/jpeg.d	/^    short x, y; \/\/ These are the final image width and height$/;"	m	class:JpegDecoder	file:	access:public
y	simpledisplay.d	/^		short y;$/;"	m	struct:XPoint	file:	access:public
y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XButtonEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XCrossingEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XKeyEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;		\/* pointer x, y coordinates in event window *\/$/;"	m	struct:XMotionEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;		\/* window location *\/$/;"	m	struct:XCreateWindowEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XConfigureRequestEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XExposeEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGraphicsExposeEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XGravityEvent	file:	access:public
y	simpledisplay.d	/^	int x, y;$/;"	m	struct:XReparentEvent	file:	access:public
y	simpledisplay.d	/^	int y;$/;"	m	struct:MouseEvent	file:	access:public
y	simpledisplay.d	/^	int y;$/;"	m	struct:Point	file:	access:public
yMCU	imaged/jpeg.d	/^        int nxMCU, nyMCU, xMCU, yMCU; \/\/ Number of MCU's, and current MCU$/;"	m	struct:JpegDecoder::ScanState	file:	access:public
y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XButtonEvent	file:	access:public
y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XCrossingEvent	file:	access:public
y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XKeyEvent	file:	access:public
y_root	simpledisplay.d	/^	int x_root, y_root;	\/* coordinates relative to root *\/$/;"	m	struct:XMotionEvent	file:	access:public
zc	session.vim	/^normal! zc$/;"	m
zliber	imaged/png.d	/^    UnCompress zliber;$/;"	m	class:PngDecoder	file:	access:public
zo	session.vim	/^normal! zo$/;"	m
zt	session.vim	/^normal! zt$/;"	m
~this	simpledisplay.d	/^	~this() {$/;"	f	class:Image	access:public	signature:()
~this	simpledisplay.d	/^	~this() {$/;"	f	class:SimpleWindow	access:public	signature:()
~this	simpledisplay.d	/^	~this() {$/;"	f	struct:ScreenPainter	access:public	signature:()
